// This file is auto-generated by @hey-api/openapi-ts
import { client as _heyApiClient } from '../client.gen'
import {
  type Options,
  acceptAuction,
  acceptBid,
  addCarrier,
  addRoleToUser,
  authenticateUser,
  createAuction,
  createAuctionStrategy,
  createBid,
  createContractOffer,
  createCooperative,
  createDocument,
  createField,
  createLanguage,
  createProduct,
  createQuality,
  createQualityControl,
  createStore,
  createUser,
  deleteAuction,
  deleteAuctionStrategy,
  deleteBid,
  deleteContractOffer,
  deleteCooperative,
  deleteDocument,
  deleteField,
  deleteLanguage,
  deleteProduct,
  deleteQuality,
  deleteQualityControl,
  deleteRegion,
  deleteStore,
  deleteUser,
  downloadDocument,
  getApplicationData,
  getAuction,
  getAuctionStrategy,
  getBid,
  getContractOffer,
  getCooperative,
  getCurrentUser,
  getDocument,
  getField,
  getLanguage,
  getProduct,
  getQuality,
  getQualityControl,
  getRegion,
  getStore,
  getUser,
  listAuctionStrategies,
  listAuctions,
  listBids,
  listContractOffers,
  listCooperatives,
  listDocumentsByUser,
  listFields,
  listLanguages,
  listProducts,
  listQualities,
  listQualityControls,
  listRegions,
  listStores,
  listUsers,
  logout,
  rejectBid,
  sendContactMessage,
  updateAuction,
  updateAuctionStrategy,
  updateBid,
  updateContractOffer,
  updateCooperative,
  updateField,
  updateLanguage,
  updateProduct,
  updateQuality,
  updateQualityControl,
  updateRegion,
  updateStore,
  updateUser,
  updateUserRoles,
} from '../sdk.gen'
import type {
  AcceptAuctionData,
  AcceptAuctionError,
  AcceptAuctionResponse,
  AcceptBidData,
  AcceptBidError,
  AcceptBidResponse,
  AddCarrierData,
  AddCarrierError,
  AddRoleToUserData,
  AddRoleToUserError,
  AddRoleToUserResponse,
  AuthenticateUserData,
  AuthenticateUserError,
  AuthenticateUserResponse,
  CreateAuctionData,
  CreateAuctionError,
  CreateAuctionResponse,
  CreateAuctionStrategyData,
  CreateAuctionStrategyError,
  CreateBidData,
  CreateBidError,
  CreateBidResponse,
  CreateContractOfferData,
  CreateContractOfferError,
  CreateContractOfferResponse,
  CreateCooperativeData,
  CreateCooperativeError,
  CreateCooperativeResponse,
  CreateDocumentData,
  CreateDocumentError,
  CreateDocumentResponse,
  CreateFieldData,
  CreateFieldError,
  CreateFieldResponse,
  CreateLanguageData,
  CreateLanguageError,
  CreateLanguageResponse,
  CreateProductData,
  CreateProductError,
  CreateProductResponse,
  CreateQualityControlData,
  CreateQualityControlError,
  CreateQualityControlResponse,
  CreateQualityData,
  CreateQualityError,
  CreateStoreData,
  CreateStoreError,
  CreateStoreResponse,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  DeleteAuctionData,
  DeleteAuctionError,
  DeleteAuctionResponse,
  DeleteAuctionStrategyData,
  DeleteAuctionStrategyError,
  DeleteAuctionStrategyResponse,
  DeleteBidData,
  DeleteBidError,
  DeleteBidResponse,
  DeleteContractOfferData,
  DeleteContractOfferError,
  DeleteContractOfferResponse,
  DeleteCooperativeData,
  DeleteCooperativeError,
  DeleteCooperativeResponse,
  DeleteDocumentData,
  DeleteDocumentError,
  DeleteDocumentResponse,
  DeleteFieldData,
  DeleteFieldError,
  DeleteFieldResponse,
  DeleteLanguageData,
  DeleteLanguageError,
  DeleteLanguageResponse,
  DeleteProductData,
  DeleteProductError,
  DeleteProductResponse,
  DeleteQualityControlData,
  DeleteQualityControlError,
  DeleteQualityControlResponse,
  DeleteQualityData,
  DeleteQualityError,
  DeleteQualityResponse,
  DeleteRegionData,
  DeleteRegionError,
  DeleteRegionResponse,
  DeleteStoreData,
  DeleteStoreError,
  DeleteStoreResponse,
  DeleteUserData,
  DeleteUserError,
  DeleteUserResponse,
  DownloadDocumentData,
  GetApplicationDataData,
  GetAuctionData,
  GetAuctionStrategyData,
  GetBidData,
  GetContractOfferData,
  GetCooperativeData,
  GetCurrentUserData,
  GetDocumentData,
  GetFieldData,
  GetLanguageData,
  GetProductData,
  GetQualityControlData,
  GetQualityData,
  GetRegionData,
  GetStoreData,
  GetUserData,
  ListAuctionStrategiesData,
  ListAuctionsData,
  ListBidsData,
  ListContractOffersData,
  ListCooperativesData,
  ListDocumentsByUserData,
  ListFieldsData,
  ListLanguagesData,
  ListProductsData,
  ListQualitiesData,
  ListQualityControlsData,
  ListRegionsData,
  ListStoresData,
  ListUsersData,
  LogoutData,
  RejectBidData,
  RejectBidError,
  RejectBidResponse,
  SendContactMessageData,
  SendContactMessageError,
  UpdateAuctionData,
  UpdateAuctionError,
  UpdateAuctionResponse,
  UpdateAuctionStrategyData,
  UpdateAuctionStrategyError,
  UpdateBidData,
  UpdateBidError,
  UpdateBidResponse,
  UpdateContractOfferData,
  UpdateContractOfferError,
  UpdateContractOfferResponse,
  UpdateCooperativeData,
  UpdateCooperativeError,
  UpdateCooperativeResponse,
  UpdateFieldData,
  UpdateFieldError,
  UpdateFieldResponse,
  UpdateLanguageData,
  UpdateLanguageError,
  UpdateLanguageResponse,
  UpdateProductData,
  UpdateProductError,
  UpdateProductResponse,
  UpdateQualityControlData,
  UpdateQualityControlError,
  UpdateQualityControlResponse,
  UpdateQualityData,
  UpdateQualityError,
  UpdateRegionData,
  UpdateRegionError,
  UpdateRegionResponse,
  UpdateStoreData,
  UpdateStoreError,
  UpdateStoreResponse,
  UpdateUserData,
  UpdateUserError,
  UpdateUserResponse,
  UpdateUserRolesData,
  UpdateUserRolesError,
  UpdateUserRolesResponse,
} from '../types.gen'
import {
  type DefaultError,
  type UseMutationOptions,
  queryOptions,
} from '@tanstack/react-query'

export const deleteUserMutation = (
  options?: Partial<Options<DeleteUserData>>
): UseMutationOptions<
  DeleteUserResponse,
  DeleteUserError,
  Options<DeleteUserData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteUserResponse,
    DeleteUserError,
    Options<DeleteUserData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
    _id: string
    _infinite?: boolean
  },
]

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0]
  if (infinite) {
    params._infinite = infinite
  }
  if (options?.body) {
    params.body = options.body
  }
  if (options?.headers) {
    params.headers = options.headers
  }
  if (options?.path) {
    params.path = options.path
  }
  if (options?.query) {
    params.query = options.query
  }
  return [params]
}

export const getUserQueryKey = (options: Options<GetUserData>) =>
  createQueryKey('getUser', options)

export const getUserOptions = (options: Options<GetUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getUserQueryKey(options),
  })
}

export const updateUserMutation = (
  options?: Partial<Options<UpdateUserData>>
): UseMutationOptions<
  UpdateUserResponse,
  UpdateUserError,
  Options<UpdateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateUserResponse,
    UpdateUserError,
    Options<UpdateUserData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const updateUserRolesMutation = (
  options?: Partial<Options<UpdateUserRolesData>>
): UseMutationOptions<
  UpdateUserRolesResponse,
  UpdateUserRolesError,
  Options<UpdateUserRolesData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateUserRolesResponse,
    UpdateUserRolesError,
    Options<UpdateUserRolesData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateUserRoles({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteStoreMutation = (
  options?: Partial<Options<DeleteStoreData>>
): UseMutationOptions<
  DeleteStoreResponse,
  DeleteStoreError,
  Options<DeleteStoreData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteStoreResponse,
    DeleteStoreError,
    Options<DeleteStoreData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteStore({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getStoreQueryKey = (options: Options<GetStoreData>) =>
  createQueryKey('getStore', options)

export const getStoreOptions = (options: Options<GetStoreData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getStore({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getStoreQueryKey(options),
  })
}

export const updateStoreMutation = (
  options?: Partial<Options<UpdateStoreData>>
): UseMutationOptions<
  UpdateStoreResponse,
  UpdateStoreError,
  Options<UpdateStoreData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateStoreResponse,
    UpdateStoreError,
    Options<UpdateStoreData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateStore({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const addCarrierMutation = (
  options?: Partial<Options<AddCarrierData>>
): UseMutationOptions<unknown, AddCarrierError, Options<AddCarrierData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AddCarrierError,
    Options<AddCarrierData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await addCarrier({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteRegionMutation = (
  options?: Partial<Options<DeleteRegionData>>
): UseMutationOptions<
  DeleteRegionResponse,
  DeleteRegionError,
  Options<DeleteRegionData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteRegionResponse,
    DeleteRegionError,
    Options<DeleteRegionData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteRegion({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getRegionQueryKey = (options: Options<GetRegionData>) =>
  createQueryKey('getRegion', options)

export const getRegionOptions = (options: Options<GetRegionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getRegion({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getRegionQueryKey(options),
  })
}

export const updateRegionMutation = (
  options?: Partial<Options<UpdateRegionData>>
): UseMutationOptions<
  UpdateRegionResponse,
  UpdateRegionError,
  Options<UpdateRegionData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateRegionResponse,
    UpdateRegionError,
    Options<UpdateRegionData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateRegion({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteQualityControlMutation = (
  options?: Partial<Options<DeleteQualityControlData>>
): UseMutationOptions<
  DeleteQualityControlResponse,
  DeleteQualityControlError,
  Options<DeleteQualityControlData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteQualityControlResponse,
    DeleteQualityControlError,
    Options<DeleteQualityControlData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteQualityControl({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getQualityControlQueryKey = (
  options: Options<GetQualityControlData>
) => createQueryKey('getQualityControl', options)

export const getQualityControlOptions = (
  options: Options<GetQualityControlData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getQualityControl({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getQualityControlQueryKey(options),
  })
}

export const updateQualityControlMutation = (
  options?: Partial<Options<UpdateQualityControlData>>
): UseMutationOptions<
  UpdateQualityControlResponse,
  UpdateQualityControlError,
  Options<UpdateQualityControlData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateQualityControlResponse,
    UpdateQualityControlError,
    Options<UpdateQualityControlData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateQualityControl({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteQualityMutation = (
  options?: Partial<Options<DeleteQualityData>>
): UseMutationOptions<
  DeleteQualityResponse,
  DeleteQualityError,
  Options<DeleteQualityData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteQualityResponse,
    DeleteQualityError,
    Options<DeleteQualityData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteQuality({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getQualityQueryKey = (options: Options<GetQualityData>) =>
  createQueryKey('getQuality', options)

export const getQualityOptions = (options: Options<GetQualityData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getQuality({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getQualityQueryKey(options),
  })
}

export const updateQualityMutation = (
  options?: Partial<Options<UpdateQualityData>>
): UseMutationOptions<
  unknown,
  UpdateQualityError,
  Options<UpdateQualityData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    UpdateQualityError,
    Options<UpdateQualityData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateQuality({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteProductMutation = (
  options?: Partial<Options<DeleteProductData>>
): UseMutationOptions<
  DeleteProductResponse,
  DeleteProductError,
  Options<DeleteProductData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteProductResponse,
    DeleteProductError,
    Options<DeleteProductData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteProduct({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getProductQueryKey = (options: Options<GetProductData>) =>
  createQueryKey('getProduct', options)

export const getProductOptions = (options: Options<GetProductData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getProduct({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getProductQueryKey(options),
  })
}

export const updateProductMutation = (
  options?: Partial<Options<UpdateProductData>>
): UseMutationOptions<
  UpdateProductResponse,
  UpdateProductError,
  Options<UpdateProductData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateProductResponse,
    UpdateProductError,
    Options<UpdateProductData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateProduct({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteLanguageMutation = (
  options?: Partial<Options<DeleteLanguageData>>
): UseMutationOptions<
  DeleteLanguageResponse,
  DeleteLanguageError,
  Options<DeleteLanguageData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteLanguageResponse,
    DeleteLanguageError,
    Options<DeleteLanguageData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteLanguage({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getLanguageQueryKey = (options: Options<GetLanguageData>) =>
  createQueryKey('getLanguage', options)

export const getLanguageOptions = (options: Options<GetLanguageData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getLanguage({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getLanguageQueryKey(options),
  })
}

export const updateLanguageMutation = (
  options?: Partial<Options<UpdateLanguageData>>
): UseMutationOptions<
  UpdateLanguageResponse,
  UpdateLanguageError,
  Options<UpdateLanguageData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateLanguageResponse,
    UpdateLanguageError,
    Options<UpdateLanguageData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateLanguage({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteFieldMutation = (
  options?: Partial<Options<DeleteFieldData>>
): UseMutationOptions<
  DeleteFieldResponse,
  DeleteFieldError,
  Options<DeleteFieldData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteFieldResponse,
    DeleteFieldError,
    Options<DeleteFieldData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteField({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getFieldQueryKey = (options: Options<GetFieldData>) =>
  createQueryKey('getField', options)

export const getFieldOptions = (options: Options<GetFieldData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getField({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getFieldQueryKey(options),
  })
}

export const updateFieldMutation = (
  options?: Partial<Options<UpdateFieldData>>
): UseMutationOptions<
  UpdateFieldResponse,
  UpdateFieldError,
  Options<UpdateFieldData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateFieldResponse,
    UpdateFieldError,
    Options<UpdateFieldData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateField({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteCooperativeMutation = (
  options?: Partial<Options<DeleteCooperativeData>>
): UseMutationOptions<
  DeleteCooperativeResponse,
  DeleteCooperativeError,
  Options<DeleteCooperativeData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteCooperativeResponse,
    DeleteCooperativeError,
    Options<DeleteCooperativeData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteCooperative({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getCooperativeQueryKey = (options: Options<GetCooperativeData>) =>
  createQueryKey('getCooperative', options)

export const getCooperativeOptions = (options: Options<GetCooperativeData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCooperative({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getCooperativeQueryKey(options),
  })
}

export const updateCooperativeMutation = (
  options?: Partial<Options<UpdateCooperativeData>>
): UseMutationOptions<
  UpdateCooperativeResponse,
  UpdateCooperativeError,
  Options<UpdateCooperativeData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateCooperativeResponse,
    UpdateCooperativeError,
    Options<UpdateCooperativeData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateCooperative({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteContractOfferMutation = (
  options?: Partial<Options<DeleteContractOfferData>>
): UseMutationOptions<
  DeleteContractOfferResponse,
  DeleteContractOfferError,
  Options<DeleteContractOfferData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteContractOfferResponse,
    DeleteContractOfferError,
    Options<DeleteContractOfferData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteContractOffer({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getContractOfferQueryKey = (
  options: Options<GetContractOfferData>
) => createQueryKey('getContractOffer', options)

export const getContractOfferOptions = (
  options: Options<GetContractOfferData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getContractOffer({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getContractOfferQueryKey(options),
  })
}

export const updateContractOfferMutation = (
  options?: Partial<Options<UpdateContractOfferData>>
): UseMutationOptions<
  UpdateContractOfferResponse,
  UpdateContractOfferError,
  Options<UpdateContractOfferData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateContractOfferResponse,
    UpdateContractOfferError,
    Options<UpdateContractOfferData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateContractOffer({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteAuctionMutation = (
  options?: Partial<Options<DeleteAuctionData>>
): UseMutationOptions<
  DeleteAuctionResponse,
  DeleteAuctionError,
  Options<DeleteAuctionData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteAuctionResponse,
    DeleteAuctionError,
    Options<DeleteAuctionData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteAuction({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getAuctionQueryKey = (options: Options<GetAuctionData>) =>
  createQueryKey('getAuction', options)

export const getAuctionOptions = (options: Options<GetAuctionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuction({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getAuctionQueryKey(options),
  })
}

export const updateAuctionMutation = (
  options?: Partial<Options<UpdateAuctionData>>
): UseMutationOptions<
  UpdateAuctionResponse,
  UpdateAuctionError,
  Options<UpdateAuctionData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateAuctionResponse,
    UpdateAuctionError,
    Options<UpdateAuctionData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateAuction({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const acceptAuctionMutation = (
  options?: Partial<Options<AcceptAuctionData>>
): UseMutationOptions<
  AcceptAuctionResponse,
  AcceptAuctionError,
  Options<AcceptAuctionData>
> => {
  const mutationOptions: UseMutationOptions<
    AcceptAuctionResponse,
    AcceptAuctionError,
    Options<AcceptAuctionData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await acceptAuction({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteBidMutation = (
  options?: Partial<Options<DeleteBidData>>
): UseMutationOptions<
  DeleteBidResponse,
  DeleteBidError,
  Options<DeleteBidData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteBidResponse,
    DeleteBidError,
    Options<DeleteBidData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteBid({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getBidQueryKey = (options: Options<GetBidData>) =>
  createQueryKey('getBid', options)

export const getBidOptions = (options: Options<GetBidData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getBid({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getBidQueryKey(options),
  })
}

export const updateBidMutation = (
  options?: Partial<Options<UpdateBidData>>
): UseMutationOptions<
  UpdateBidResponse,
  UpdateBidError,
  Options<UpdateBidData>
> => {
  const mutationOptions: UseMutationOptions<
    UpdateBidResponse,
    UpdateBidError,
    Options<UpdateBidData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateBid({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const rejectBidMutation = (
  options?: Partial<Options<RejectBidData>>
): UseMutationOptions<
  RejectBidResponse,
  RejectBidError,
  Options<RejectBidData>
> => {
  const mutationOptions: UseMutationOptions<
    RejectBidResponse,
    RejectBidError,
    Options<RejectBidData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await rejectBid({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const acceptBidMutation = (
  options?: Partial<Options<AcceptBidData>>
): UseMutationOptions<
  AcceptBidResponse,
  AcceptBidError,
  Options<AcceptBidData>
> => {
  const mutationOptions: UseMutationOptions<
    AcceptBidResponse,
    AcceptBidError,
    Options<AcceptBidData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await acceptBid({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const deleteAuctionStrategyMutation = (
  options?: Partial<Options<DeleteAuctionStrategyData>>
): UseMutationOptions<
  DeleteAuctionStrategyResponse,
  DeleteAuctionStrategyError,
  Options<DeleteAuctionStrategyData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteAuctionStrategyResponse,
    DeleteAuctionStrategyError,
    Options<DeleteAuctionStrategyData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteAuctionStrategy({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getAuctionStrategyQueryKey = (
  options: Options<GetAuctionStrategyData>
) => createQueryKey('getAuctionStrategy', options)

export const getAuctionStrategyOptions = (
  options: Options<GetAuctionStrategyData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getAuctionStrategy({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getAuctionStrategyQueryKey(options),
  })
}

export const updateAuctionStrategyMutation = (
  options?: Partial<Options<UpdateAuctionStrategyData>>
): UseMutationOptions<
  unknown,
  UpdateAuctionStrategyError,
  Options<UpdateAuctionStrategyData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    UpdateAuctionStrategyError,
    Options<UpdateAuctionStrategyData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await updateAuctionStrategy({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listUsersQueryKey = (options?: Options<ListUsersData>) =>
  createQueryKey('listUsers', options)

export const listUsersOptions = (options?: Options<ListUsersData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listUsersQueryKey(options),
  })
}

export const createUserQueryKey = (options: Options<CreateUserData>) =>
  createQueryKey('createUser', options)

export const createUserOptions = (options: Options<CreateUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createUserQueryKey(options),
  })
}

export const createUserMutation = (
  options?: Partial<Options<CreateUserData>>
): UseMutationOptions<
  CreateUserResponse,
  CreateUserError,
  Options<CreateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateUserResponse,
    CreateUserError,
    Options<CreateUserData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await createUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const addRoleToUserQueryKey = (options: Options<AddRoleToUserData>) =>
  createQueryKey('addRoleToUser', options)

export const addRoleToUserOptions = (options: Options<AddRoleToUserData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await addRoleToUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: addRoleToUserQueryKey(options),
  })
}

export const addRoleToUserMutation = (
  options?: Partial<Options<AddRoleToUserData>>
): UseMutationOptions<
  AddRoleToUserResponse,
  AddRoleToUserError,
  Options<AddRoleToUserData>
> => {
  const mutationOptions: UseMutationOptions<
    AddRoleToUserResponse,
    AddRoleToUserError,
    Options<AddRoleToUserData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await addRoleToUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listStoresQueryKey = (options?: Options<ListStoresData>) =>
  createQueryKey('listStores', options)

export const listStoresOptions = (options?: Options<ListStoresData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listStores({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listStoresQueryKey(options),
  })
}

export const createStoreQueryKey = (options: Options<CreateStoreData>) =>
  createQueryKey('createStore', options)

export const createStoreOptions = (options: Options<CreateStoreData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createStore({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createStoreQueryKey(options),
  })
}

export const createStoreMutation = (
  options?: Partial<Options<CreateStoreData>>
): UseMutationOptions<
  CreateStoreResponse,
  CreateStoreError,
  Options<CreateStoreData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateStoreResponse,
    CreateStoreError,
    Options<CreateStoreData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await createStore({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listQualityControlsQueryKey = (
  options?: Options<ListQualityControlsData>
) => createQueryKey('listQualityControls', options)

export const listQualityControlsOptions = (
  options?: Options<ListQualityControlsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listQualityControls({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listQualityControlsQueryKey(options),
  })
}

export const createQualityControlQueryKey = (
  options: Options<CreateQualityControlData>
) => createQueryKey('createQualityControl', options)

export const createQualityControlOptions = (
  options: Options<CreateQualityControlData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createQualityControl({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createQualityControlQueryKey(options),
  })
}

export const createQualityControlMutation = (
  options?: Partial<Options<CreateQualityControlData>>
): UseMutationOptions<
  CreateQualityControlResponse,
  CreateQualityControlError,
  Options<CreateQualityControlData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateQualityControlResponse,
    CreateQualityControlError,
    Options<CreateQualityControlData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await createQualityControl({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listQualitiesQueryKey = (options?: Options<ListQualitiesData>) =>
  createQueryKey('listQualities', options)

export const listQualitiesOptions = (options?: Options<ListQualitiesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listQualities({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listQualitiesQueryKey(options),
  })
}

export const createQualityQueryKey = (options: Options<CreateQualityData>) =>
  createQueryKey('createQuality', options)

export const createQualityOptions = (options: Options<CreateQualityData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createQuality({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createQualityQueryKey(options),
  })
}

export const createQualityMutation = (
  options?: Partial<Options<CreateQualityData>>
): UseMutationOptions<
  unknown,
  CreateQualityError,
  Options<CreateQualityData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    CreateQualityError,
    Options<CreateQualityData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await createQuality({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listProductsQueryKey = (options?: Options<ListProductsData>) =>
  createQueryKey('listProducts', options)

export const listProductsOptions = (options?: Options<ListProductsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listProducts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listProductsQueryKey(options),
  })
}

export const createProductQueryKey = (options: Options<CreateProductData>) =>
  createQueryKey('createProduct', options)

export const createProductOptions = (options: Options<CreateProductData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createProduct({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createProductQueryKey(options),
  })
}

export const createProductMutation = (
  options?: Partial<Options<CreateProductData>>
): UseMutationOptions<
  CreateProductResponse,
  CreateProductError,
  Options<CreateProductData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateProductResponse,
    CreateProductError,
    Options<CreateProductData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await createProduct({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listLanguagesQueryKey = (options?: Options<ListLanguagesData>) =>
  createQueryKey('listLanguages', options)

export const listLanguagesOptions = (options?: Options<ListLanguagesData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listLanguages({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listLanguagesQueryKey(options),
  })
}

export const createLanguageQueryKey = (options: Options<CreateLanguageData>) =>
  createQueryKey('createLanguage', options)

export const createLanguageOptions = (options: Options<CreateLanguageData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createLanguage({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createLanguageQueryKey(options),
  })
}

export const createLanguageMutation = (
  options?: Partial<Options<CreateLanguageData>>
): UseMutationOptions<
  CreateLanguageResponse,
  CreateLanguageError,
  Options<CreateLanguageData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateLanguageResponse,
    CreateLanguageError,
    Options<CreateLanguageData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await createLanguage({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listFieldsQueryKey = (options?: Options<ListFieldsData>) =>
  createQueryKey('listFields', options)

export const listFieldsOptions = (options?: Options<ListFieldsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listFields({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listFieldsQueryKey(options),
  })
}

export const createFieldQueryKey = (options: Options<CreateFieldData>) =>
  createQueryKey('createField', options)

export const createFieldOptions = (options: Options<CreateFieldData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createField({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createFieldQueryKey(options),
  })
}

export const createFieldMutation = (
  options?: Partial<Options<CreateFieldData>>
): UseMutationOptions<
  CreateFieldResponse,
  CreateFieldError,
  Options<CreateFieldData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateFieldResponse,
    CreateFieldError,
    Options<CreateFieldData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await createField({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listDocumentsByUserQueryKey = (
  options: Options<ListDocumentsByUserData>
) => createQueryKey('listDocumentsByUser', options)

export const listDocumentsByUserOptions = (
  options: Options<ListDocumentsByUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listDocumentsByUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listDocumentsByUserQueryKey(options),
  })
}

export const createDocumentQueryKey = (options: Options<CreateDocumentData>) =>
  createQueryKey('createDocument', options)

export const createDocumentOptions = (options: Options<CreateDocumentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createDocument({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createDocumentQueryKey(options),
  })
}

export const createDocumentMutation = (
  options?: Partial<Options<CreateDocumentData>>
): UseMutationOptions<
  CreateDocumentResponse,
  CreateDocumentError,
  Options<CreateDocumentData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateDocumentResponse,
    CreateDocumentError,
    Options<CreateDocumentData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await createDocument({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listCooperativesQueryKey = (
  options?: Options<ListCooperativesData>
) => createQueryKey('listCooperatives', options)

export const listCooperativesOptions = (
  options?: Options<ListCooperativesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listCooperatives({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listCooperativesQueryKey(options),
  })
}

export const createCooperativeQueryKey = (
  options: Options<CreateCooperativeData>
) => createQueryKey('createCooperative', options)

export const createCooperativeOptions = (
  options: Options<CreateCooperativeData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createCooperative({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createCooperativeQueryKey(options),
  })
}

export const createCooperativeMutation = (
  options?: Partial<Options<CreateCooperativeData>>
): UseMutationOptions<
  CreateCooperativeResponse,
  CreateCooperativeError,
  Options<CreateCooperativeData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateCooperativeResponse,
    CreateCooperativeError,
    Options<CreateCooperativeData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await createCooperative({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listContractOffersQueryKey = (
  options?: Options<ListContractOffersData>
) => createQueryKey('listContractOffers', options)

export const listContractOffersOptions = (
  options?: Options<ListContractOffersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listContractOffers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listContractOffersQueryKey(options),
  })
}

export const createContractOfferQueryKey = (
  options: Options<CreateContractOfferData>
) => createQueryKey('createContractOffer', options)

export const createContractOfferOptions = (
  options: Options<CreateContractOfferData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createContractOffer({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createContractOfferQueryKey(options),
  })
}

export const createContractOfferMutation = (
  options?: Partial<Options<CreateContractOfferData>>
): UseMutationOptions<
  CreateContractOfferResponse,
  CreateContractOfferError,
  Options<CreateContractOfferData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateContractOfferResponse,
    CreateContractOfferError,
    Options<CreateContractOfferData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await createContractOffer({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const sendContactMessageQueryKey = (
  options: Options<SendContactMessageData>
) => createQueryKey('sendContactMessage', options)

export const sendContactMessageOptions = (
  options: Options<SendContactMessageData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await sendContactMessage({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: sendContactMessageQueryKey(options),
  })
}

export const sendContactMessageMutation = (
  options?: Partial<Options<SendContactMessageData>>
): UseMutationOptions<
  unknown,
  SendContactMessageError,
  Options<SendContactMessageData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    SendContactMessageError,
    Options<SendContactMessageData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await sendContactMessage({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const logoutQueryKey = (options?: Options<LogoutData>) =>
  createQueryKey('logout', options)

export const logoutOptions = (options?: Options<LogoutData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await logout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: logoutQueryKey(options),
  })
}

export const logoutMutation = (
  options?: Partial<Options<LogoutData>>
): UseMutationOptions<unknown, DefaultError, Options<LogoutData>> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<LogoutData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await logout({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const authenticateUserQueryKey = (
  options: Options<AuthenticateUserData>
) => createQueryKey('authenticateUser', options)

export const authenticateUserOptions = (
  options: Options<AuthenticateUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticateUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: authenticateUserQueryKey(options),
  })
}

export const authenticateUserMutation = (
  options?: Partial<Options<AuthenticateUserData>>
): UseMutationOptions<
  AuthenticateUserResponse,
  AuthenticateUserError,
  Options<AuthenticateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthenticateUserResponse,
    AuthenticateUserError,
    Options<AuthenticateUserData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await authenticateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listAuctionsQueryKey = (options?: Options<ListAuctionsData>) =>
  createQueryKey('listAuctions', options)

export const listAuctionsOptions = (options?: Options<ListAuctionsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listAuctions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listAuctionsQueryKey(options),
  })
}

export const createAuctionQueryKey = (options: Options<CreateAuctionData>) =>
  createQueryKey('createAuction', options)

export const createAuctionOptions = (options: Options<CreateAuctionData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createAuction({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createAuctionQueryKey(options),
  })
}

export const createAuctionMutation = (
  options?: Partial<Options<CreateAuctionData>>
): UseMutationOptions<
  CreateAuctionResponse,
  CreateAuctionError,
  Options<CreateAuctionData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateAuctionResponse,
    CreateAuctionError,
    Options<CreateAuctionData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await createAuction({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listBidsQueryKey = (options: Options<ListBidsData>) =>
  createQueryKey('listBids', options)

export const listBidsOptions = (options: Options<ListBidsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listBids({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listBidsQueryKey(options),
  })
}

export const createBidQueryKey = (options: Options<CreateBidData>) =>
  createQueryKey('createBid', options)

export const createBidOptions = (options: Options<CreateBidData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createBid({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createBidQueryKey(options),
  })
}

export const createBidMutation = (
  options?: Partial<Options<CreateBidData>>
): UseMutationOptions<
  CreateBidResponse,
  CreateBidError,
  Options<CreateBidData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateBidResponse,
    CreateBidError,
    Options<CreateBidData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await createBid({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listAuctionStrategiesQueryKey = (
  options?: Options<ListAuctionStrategiesData>
) => createQueryKey('listAuctionStrategies', options)

export const listAuctionStrategiesOptions = (
  options?: Options<ListAuctionStrategiesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listAuctionStrategies({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listAuctionStrategiesQueryKey(options),
  })
}

export const createAuctionStrategyQueryKey = (
  options: Options<CreateAuctionStrategyData>
) => createQueryKey('createAuctionStrategy', options)

export const createAuctionStrategyOptions = (
  options: Options<CreateAuctionStrategyData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createAuctionStrategy({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: createAuctionStrategyQueryKey(options),
  })
}

export const createAuctionStrategyMutation = (
  options?: Partial<Options<CreateAuctionStrategyData>>
): UseMutationOptions<
  unknown,
  CreateAuctionStrategyError,
  Options<CreateAuctionStrategyData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    CreateAuctionStrategyError,
    Options<CreateAuctionStrategyData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await createAuctionStrategy({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const listRegionsQueryKey = (options?: Options<ListRegionsData>) =>
  createQueryKey('listRegions', options)

export const listRegionsOptions = (options?: Options<ListRegionsData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listRegions({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: listRegionsQueryKey(options),
  })
}

export const deleteDocumentMutation = (
  options?: Partial<Options<DeleteDocumentData>>
): UseMutationOptions<
  DeleteDocumentResponse,
  DeleteDocumentError,
  Options<DeleteDocumentData>
> => {
  const mutationOptions: UseMutationOptions<
    DeleteDocumentResponse,
    DeleteDocumentError,
    Options<DeleteDocumentData>
  > = {
    mutationFn: async localOptions => {
      const { data } = await deleteDocument({
        ...options,
        ...localOptions,
        throwOnError: true,
      })
      return data
    },
  }
  return mutationOptions
}

export const getDocumentQueryKey = (options: Options<GetDocumentData>) =>
  createQueryKey('getDocument', options)

export const getDocumentOptions = (options: Options<GetDocumentData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getDocument({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getDocumentQueryKey(options),
  })
}

export const downloadDocumentQueryKey = (
  options: Options<DownloadDocumentData>
) => createQueryKey('downloadDocument', options)

export const downloadDocumentOptions = (
  options: Options<DownloadDocumentData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await downloadDocument({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: downloadDocumentQueryKey(options),
  })
}

export const getCurrentUserQueryKey = (options?: Options<GetCurrentUserData>) =>
  createQueryKey('getCurrentUser', options)

export const getCurrentUserOptions = (
  options?: Options<GetCurrentUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCurrentUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getCurrentUserQueryKey(options),
  })
}

export const getApplicationDataQueryKey = (
  options?: Options<GetApplicationDataData>
) => createQueryKey('getApplicationData', options)

export const getApplicationDataOptions = (
  options?: Options<GetApplicationDataData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getApplicationData({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      })
      return data
    },
    queryKey: getApplicationDataQueryKey(options),
  })
}
