// This file is auto-generated by @hey-api/openapi-ts
import { client as _heyApiClient } from './client.gen'
import type {
  AcceptAuctionData,
  AcceptAuctionError,
  AcceptAuctionResponse,
  AcceptBidData,
  AcceptBidError,
  AcceptBidResponse,
  AddCarrierData,
  AddCarrierError,
  AddRoleToUserData,
  AddRoleToUserError,
  AddRoleToUserResponse,
  AuthenticateUserData,
  AuthenticateUserError,
  AuthenticateUserResponse,
  CreateAuctionData,
  CreateAuctionError,
  CreateAuctionResponse,
  CreateAuctionStrategyData,
  CreateAuctionStrategyError,
  CreateBidData,
  CreateBidError,
  CreateBidResponse,
  CreateContractOfferData,
  CreateContractOfferError,
  CreateContractOfferResponse,
  CreateCooperativeData,
  CreateCooperativeError,
  CreateCooperativeResponse,
  CreateDocumentData,
  CreateDocumentError,
  CreateDocumentResponse,
  CreateFieldData,
  CreateFieldError,
  CreateFieldResponse,
  CreateLanguageData,
  CreateLanguageError,
  CreateLanguageResponse,
  CreateProductData,
  CreateProductError,
  CreateProductResponse,
  CreateQualityControlData,
  CreateQualityControlError,
  CreateQualityControlResponse,
  CreateQualityData,
  CreateQualityError,
  CreateRegionData,
  CreateRegionError,
  CreateRegionResponse,
  CreateStoreData,
  CreateStoreError,
  CreateStoreResponse,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  DeleteAuctionData,
  DeleteAuctionError,
  DeleteAuctionResponse,
  DeleteAuctionStrategyData,
  DeleteAuctionStrategyError,
  DeleteAuctionStrategyResponse,
  DeleteBidData,
  DeleteBidError,
  DeleteBidResponse,
  DeleteContractOfferData,
  DeleteContractOfferError,
  DeleteContractOfferResponse,
  DeleteCooperativeData,
  DeleteCooperativeError,
  DeleteCooperativeResponse,
  DeleteDocumentData,
  DeleteDocumentError,
  DeleteDocumentResponse,
  DeleteFieldData,
  DeleteFieldError,
  DeleteFieldResponse,
  DeleteLanguageData,
  DeleteLanguageError,
  DeleteLanguageResponse,
  DeleteProductData,
  DeleteProductError,
  DeleteProductResponse,
  DeleteQualityControlData,
  DeleteQualityControlError,
  DeleteQualityControlResponse,
  DeleteQualityData,
  DeleteQualityError,
  DeleteQualityResponse,
  DeleteRegionData,
  DeleteRegionError,
  DeleteRegionResponse,
  DeleteStoreData,
  DeleteStoreError,
  DeleteStoreResponse,
  DeleteUserData,
  DeleteUserError,
  DeleteUserResponse,
  GetApplicationDataData,
  GetApplicationDataError,
  GetApplicationDataResponse,
  GetAuctionData,
  GetAuctionError,
  GetAuctionResponse,
  GetAuctionStrategyData,
  GetAuctionStrategyError,
  GetBidData,
  GetBidError,
  GetBidResponse,
  GetContractOfferData,
  GetContractOfferError,
  GetContractOfferResponse,
  GetCooperativeData,
  GetCooperativeError,
  GetCooperativeResponse,
  GetCurrentUserData,
  GetCurrentUserError,
  GetCurrentUserResponse,
  GetDocumentData,
  GetDocumentError,
  GetDocumentResponse,
  GetFieldData,
  GetFieldError,
  GetFieldResponse,
  GetLanguageData,
  GetLanguageError,
  GetLanguageResponse,
  GetProductData,
  GetProductError,
  GetProductResponse,
  GetQualityControlData,
  GetQualityControlError,
  GetQualityControlResponse,
  GetQualityData,
  GetQualityError,
  GetRegionData,
  GetRegionError,
  GetRegionResponse,
  GetStoreData,
  GetStoreError,
  GetStoreResponse,
  GetUserData,
  GetUserError,
  GetUserResponse,
  ListAuctionStrategiesData,
  ListAuctionStrategiesError,
  ListAuctionsData,
  ListAuctionsResponse,
  ListBidsData,
  ListBidsResponse,
  ListContractOffersData,
  ListContractOffersResponse,
  ListCooperativesData,
  ListCooperativesResponse,
  ListDocumentsByUserData,
  ListDocumentsByUserResponse,
  ListFieldsData,
  ListFieldsResponse,
  ListLanguagesData,
  ListLanguagesResponse,
  ListProductsData,
  ListProductsResponse,
  ListQualitiesData,
  ListQualitiesError,
  ListQualityControlsData,
  ListQualityControlsResponse,
  ListRegionsData,
  ListRegionsResponse,
  ListStoresData,
  ListStoresResponse,
  ListUsersData,
  ListUsersResponse,
  LogoutData,
  SendContactMessageData,
  SendContactMessageError,
  UpdateAuctionData,
  UpdateAuctionError,
  UpdateAuctionResponse,
  UpdateAuctionStrategyData,
  UpdateAuctionStrategyError,
  UpdateBidData,
  UpdateBidError,
  UpdateBidResponse,
  UpdateContractOfferData,
  UpdateContractOfferError,
  UpdateContractOfferResponse,
  UpdateCooperativeData,
  UpdateCooperativeError,
  UpdateCooperativeResponse,
  UpdateDocumentData,
  UpdateDocumentError,
  UpdateDocumentResponse,
  UpdateFieldData,
  UpdateFieldError,
  UpdateFieldResponse,
  UpdateLanguageData,
  UpdateLanguageError,
  UpdateLanguageResponse,
  UpdateProductData,
  UpdateProductError,
  UpdateProductResponse,
  UpdateQualityControlData,
  UpdateQualityControlError,
  UpdateQualityControlResponse,
  UpdateQualityData,
  UpdateQualityError,
  UpdateRegionData,
  UpdateRegionError,
  UpdateRegionResponse,
  UpdateStoreData,
  UpdateStoreError,
  UpdateStoreResponse,
  UpdateUserData,
  UpdateUserError,
  UpdateUserResponse,
  UpdateUserRolesData,
  UpdateUserRolesError,
  UpdateUserRolesResponse,
} from './types.gen'
import type {
  Client,
  Options as ClientOptions,
  TDataShape,
} from '@hey-api/client-fetch'

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>
}

/**
 * Supprimer un champ
 */
export const deleteField = <ThrowOnError extends boolean = false>(
  options: Options<DeleteFieldData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteFieldResponse,
    DeleteFieldError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/users/{userId}/fields/{id}',
    ...options,
  })
}

/**
 * Obtenir un champ
 */
export const getField = <ThrowOnError extends boolean = false>(
  options: Options<GetFieldData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetFieldResponse,
    GetFieldError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/users/{userId}/fields/{id}',
    ...options,
  })
}

/**
 * Mettre à jour un champ
 */
export const updateField = <ThrowOnError extends boolean = false>(
  options: Options<UpdateFieldData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateFieldResponse,
    UpdateFieldError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/users/{userId}/fields/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Supprimer un utilisateur
 * Supprime un utilisateur en fonction de son identifiant.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(
  options: Options<DeleteUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteUserResponse,
    DeleteUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/users/{id}',
    ...options,
  })
}

/**
 * Récupérer les détails d'un utilisateur
 * Renvoie les informations détaillées d'un utilisateur à partir de son ID.
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options: Options<GetUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetUserResponse,
    GetUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/users/{id}',
    ...options,
  })
}

/**
 * Mettre à jour un utilisateur
 * Met à jour un utilisateur existant en utilisant l'ID spécifié dans l'URL.
 */
export const updateUser = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserResponse,
    UpdateUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/users/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Mettre à jour les rôles d'un utilisateur
 * Remplace l'ensemble des rôles de l'utilisateur spécifié par la liste fournie.
 */
export const updateUserRoles = <ThrowOnError extends boolean = false>(
  options: Options<UpdateUserRolesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateUserRolesResponse,
    UpdateUserRolesError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/users/{id}/roles',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Supprimer un magasin
 */
export const deleteStore = <ThrowOnError extends boolean = false>(
  options: Options<DeleteStoreData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteStoreResponse,
    DeleteStoreError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/stores/{id}',
    ...options,
  })
}

/**
 * Obtenir un magasin
 */
export const getStore = <ThrowOnError extends boolean = false>(
  options: Options<GetStoreData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetStoreResponse,
    GetStoreError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/stores/{id}',
    ...options,
  })
}

/**
 * Mettre à jour un magasin
 */
export const updateStore = <ThrowOnError extends boolean = false>(
  options: Options<UpdateStoreData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateStoreResponse,
    UpdateStoreError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/stores/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Associer un transporteur à une région
 */
export const addCarrier = <ThrowOnError extends boolean = false>(
  options: Options<AddCarrierData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    unknown,
    AddCarrierError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/regions/{regionId}/carriers/{carrierId}',
    ...options,
  })
}

/**
 * Supprimer une région
 */
export const deleteRegion = <ThrowOnError extends boolean = false>(
  options: Options<DeleteRegionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteRegionResponse,
    DeleteRegionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/regions/{id}',
    ...options,
  })
}

/**
 * Obtenir une région par ID
 */
export const getRegion = <ThrowOnError extends boolean = false>(
  options: Options<GetRegionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetRegionResponse,
    GetRegionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/regions/{id}',
    ...options,
  })
}

/**
 * Mettre à jour une région
 */
export const updateRegion = <ThrowOnError extends boolean = false>(
  options: Options<UpdateRegionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateRegionResponse,
    UpdateRegionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/regions/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Supprimer un contrôle qualité
 */
export const deleteQualityControl = <ThrowOnError extends boolean = false>(
  options: Options<DeleteQualityControlData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteQualityControlResponse,
    DeleteQualityControlError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/quality-controls/{id}',
    ...options,
  })
}

/**
 * Obtenir un contrôle qualité
 */
export const getQualityControl = <ThrowOnError extends boolean = false>(
  options: Options<GetQualityControlData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetQualityControlResponse,
    GetQualityControlError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/quality-controls/{id}',
    ...options,
  })
}

/**
 * Mettre à jour un contrôle qualité
 */
export const updateQualityControl = <ThrowOnError extends boolean = false>(
  options: Options<UpdateQualityControlData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateQualityControlResponse,
    UpdateQualityControlError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/quality-controls/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Supprimer une qualité
 */
export const deleteQuality = <ThrowOnError extends boolean = false>(
  options: Options<DeleteQualityData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteQualityResponse,
    DeleteQualityError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/qualities/{id}',
    ...options,
  })
}

/**
 * Obtenir une qualité
 */
export const getQuality = <ThrowOnError extends boolean = false>(
  options: Options<GetQualityData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetQualityError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/qualities/{id}',
    ...options,
  })
}

/**
 * Mettre à jour une qualité
 */
export const updateQuality = <ThrowOnError extends boolean = false>(
  options: Options<UpdateQualityData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    unknown,
    UpdateQualityError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/qualities/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Supprimer un produit
 */
export const deleteProduct = <ThrowOnError extends boolean = false>(
  options: Options<DeleteProductData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteProductResponse,
    DeleteProductError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/products/{id}',
    ...options,
  })
}

/**
 * Obtenir un produit
 */
export const getProduct = <ThrowOnError extends boolean = false>(
  options: Options<GetProductData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetProductResponse,
    GetProductError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/products/{id}',
    ...options,
  })
}

/**
 * Mettre à jour un produit
 */
export const updateProduct = <ThrowOnError extends boolean = false>(
  options: Options<UpdateProductData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateProductResponse,
    UpdateProductError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/products/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Supprimer une langue
 * Supprime une langue en fonction de son ID.
 */
export const deleteLanguage = <ThrowOnError extends boolean = false>(
  options: Options<DeleteLanguageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteLanguageResponse,
    DeleteLanguageError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/languages/{id}',
    ...options,
  })
}

/**
 * Récupérer les détails d'une langue
 * Renvoie les informations détaillées d'une langue à partir de son ID.
 */
export const getLanguage = <ThrowOnError extends boolean = false>(
  options: Options<GetLanguageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetLanguageResponse,
    GetLanguageError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/languages/{id}',
    ...options,
  })
}

/**
 * Mettre à jour une langue
 * Met à jour une langue existante en utilisant l'ID spécifié dans l'URL.
 */
export const updateLanguage = <ThrowOnError extends boolean = false>(
  options: Options<UpdateLanguageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateLanguageResponse,
    UpdateLanguageError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/languages/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Supprimer un document
 */
export const deleteDocument = <ThrowOnError extends boolean = false>(
  options: Options<DeleteDocumentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDocumentResponse,
    DeleteDocumentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/documents/{id}',
    ...options,
  })
}

/**
 * Obtenir un document
 */
export const getDocument = <ThrowOnError extends boolean = false>(
  options: Options<GetDocumentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetDocumentResponse,
    GetDocumentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/documents/{id}',
    ...options,
  })
}

/**
 * Mettre à jour un document
 */
export const updateDocument = <ThrowOnError extends boolean = false>(
  options: Options<UpdateDocumentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateDocumentResponse,
    UpdateDocumentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/documents/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Supprimer une coopérative
 */
export const deleteCooperative = <ThrowOnError extends boolean = false>(
  options: Options<DeleteCooperativeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteCooperativeResponse,
    DeleteCooperativeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/cooperatives/{id}',
    ...options,
  })
}

/**
 * Obtenir une coopérative
 */
export const getCooperative = <ThrowOnError extends boolean = false>(
  options: Options<GetCooperativeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetCooperativeResponse,
    GetCooperativeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/cooperatives/{id}',
    ...options,
  })
}

/**
 * Mettre à jour une coopérative
 */
export const updateCooperative = <ThrowOnError extends boolean = false>(
  options: Options<UpdateCooperativeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateCooperativeResponse,
    UpdateCooperativeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/cooperatives/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Supprimer un contrat
 */
export const deleteContractOffer = <ThrowOnError extends boolean = false>(
  options: Options<DeleteContractOfferData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteContractOfferResponse,
    DeleteContractOfferError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/contracts/{id}',
    ...options,
  })
}

/**
 * Obtenir un contrat
 */
export const getContractOffer = <ThrowOnError extends boolean = false>(
  options: Options<GetContractOfferData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetContractOfferResponse,
    GetContractOfferError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/contracts/{id}',
    ...options,
  })
}

/**
 * Mettre à jour un contrat
 */
export const updateContractOffer = <ThrowOnError extends boolean = false>(
  options: Options<UpdateContractOfferData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateContractOfferResponse,
    UpdateContractOfferError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/contracts/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Supprimer une enchère
 */
export const deleteAuction = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAuctionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAuctionResponse,
    DeleteAuctionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/{id}',
    ...options,
  })
}

/**
 * Obtenir une enchère
 */
export const getAuction = <ThrowOnError extends boolean = false>(
  options: Options<GetAuctionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetAuctionResponse,
    GetAuctionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/{id}',
    ...options,
  })
}

/**
 * Mettre à jour une enchère
 */
export const updateAuction = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAuctionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateAuctionResponse,
    UpdateAuctionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Accepter une enchère
 */
export const acceptAuction = <ThrowOnError extends boolean = false>(
  options: Options<AcceptAuctionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    AcceptAuctionResponse,
    AcceptAuctionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/{id}/accept',
    ...options,
  })
}

/**
 * Supprimer une offre
 */
export const deleteBid = <ThrowOnError extends boolean = false>(
  options: Options<DeleteBidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteBidResponse,
    DeleteBidError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/{auctionId}/bids/{bidId}',
    ...options,
  })
}

/**
 * Obtenir une offre
 */
export const getBid = <ThrowOnError extends boolean = false>(
  options: Options<GetBidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetBidResponse,
    GetBidError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/{auctionId}/bids/{bidId}',
    ...options,
  })
}

/**
 * Mettre à jour une offre
 */
export const updateBid = <ThrowOnError extends boolean = false>(
  options: Options<UpdateBidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateBidResponse,
    UpdateBidError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/{auctionId}/bids/{bidId}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Accepter une offre
 */
export const acceptBid = <ThrowOnError extends boolean = false>(
  options: Options<AcceptBidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    AcceptBidResponse,
    AcceptBidError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/{auctionId}/bids/{bidId}/accept',
    ...options,
  })
}

/**
 * Supprimer une stratégie d'enchère
 */
export const deleteAuctionStrategy = <ThrowOnError extends boolean = false>(
  options: Options<DeleteAuctionStrategyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteAuctionStrategyResponse,
    DeleteAuctionStrategyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/strategies/{id}',
    ...options,
  })
}

/**
 * Obtenir une stratégie d'enchère
 */
export const getAuctionStrategy = <ThrowOnError extends boolean = false>(
  options: Options<GetAuctionStrategyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    unknown,
    GetAuctionStrategyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/strategies/{id}',
    ...options,
  })
}

/**
 * Mettre à jour une stratégie d'enchère
 */
export const updateAuctionStrategy = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAuctionStrategyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    unknown,
    UpdateAuctionStrategyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/strategies/{id}',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Lister tous les utilisateurs
 * Renvoie la liste de tous les utilisateurs présents dans le système.
 */
export const listUsers = <ThrowOnError extends boolean = false>(
  options?: Options<ListUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListUsersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/users',
    ...options,
  })
}

/**
 * Créer un utilisateur
 * Crée un nouvel utilisateur dans le système.
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options: Options<CreateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateUserResponse,
    CreateUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/users',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Obtenir tous les champs d’un utilisateur
 */
export const listFields = <ThrowOnError extends boolean = false>(
  options: Options<ListFieldsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListFieldsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/users/{userId}/fields',
    ...options,
  })
}

/**
 * Créer un champ
 */
export const createField = <ThrowOnError extends boolean = false>(
  options: Options<CreateFieldData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateFieldResponse,
    CreateFieldError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/users/{userId}/fields',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Ajouter un rôle à un utilisateur
 * Ajoute un rôle spécifique à l'utilisateur en utilisant le nom du rôle.
 */
export const addRoleToUser = <ThrowOnError extends boolean = false>(
  options: Options<AddRoleToUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AddRoleToUserResponse,
    AddRoleToUserError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/users/{id}/roles/{roleName}',
    ...options,
  })
}

/**
 * Obtenir tous les magasins
 */
export const listStores = <ThrowOnError extends boolean = false>(
  options?: Options<ListStoresData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListStoresResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/stores',
    ...options,
  })
}

/**
 * Créer un magasin
 */
export const createStore = <ThrowOnError extends boolean = false>(
  options: Options<CreateStoreData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateStoreResponse,
    CreateStoreError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/stores',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Lister toutes les régions
 */
export const listRegions = <ThrowOnError extends boolean = false>(
  options?: Options<ListRegionsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListRegionsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/regions',
    ...options,
  })
}

/**
 * Créer une nouvelle région
 */
export const createRegion = <ThrowOnError extends boolean = false>(
  options: Options<CreateRegionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateRegionResponse,
    CreateRegionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/regions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Lister tous les contrôles qualité d’un produit
 */
export const listQualityControls = <ThrowOnError extends boolean = false>(
  options?: Options<ListQualityControlsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListQualityControlsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/quality-controls',
    ...options,
  })
}

/**
 * Créer un contrôle qualité
 */
export const createQualityControl = <ThrowOnError extends boolean = false>(
  options: Options<CreateQualityControlData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateQualityControlResponse,
    CreateQualityControlError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/quality-controls',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Obtenir toutes les qualités
 */
export const listQualities = <ThrowOnError extends boolean = false>(
  options?: Options<ListQualitiesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    unknown,
    ListQualitiesError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/qualities',
    ...options,
  })
}

/**
 * Créer une qualité
 */
export const createQuality = <ThrowOnError extends boolean = false>(
  options: Options<CreateQualityData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    CreateQualityError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/qualities',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Obtenir tous les produits
 */
export const listProducts = <ThrowOnError extends boolean = false>(
  options?: Options<ListProductsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListProductsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/products',
    ...options,
  })
}

/**
 * Créer un produit
 */
export const createProduct = <ThrowOnError extends boolean = false>(
  options: Options<CreateProductData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateProductResponse,
    CreateProductError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/products',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Lister toutes les langues
 * Renvoie la liste de toutes les langues présentes dans le système.
 */
export const listLanguages = <ThrowOnError extends boolean = false>(
  options?: Options<ListLanguagesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListLanguagesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/languages',
    ...options,
  })
}

/**
 * Créer une langue
 * Crée une nouvelle langue dans le système.
 */
export const createLanguage = <ThrowOnError extends boolean = false>(
  options: Options<CreateLanguageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateLanguageResponse,
    CreateLanguageError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/languages',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Créer un document
 */
export const createDocument = <ThrowOnError extends boolean = false>(
  options: Options<CreateDocumentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDocumentResponse,
    CreateDocumentError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/documents',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Lister toutes les coopératives
 */
export const listCooperatives = <ThrowOnError extends boolean = false>(
  options?: Options<ListCooperativesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListCooperativesResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/cooperatives',
    ...options,
  })
}

/**
 * Créer une coopérative
 */
export const createCooperative = <ThrowOnError extends boolean = false>(
  options: Options<CreateCooperativeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateCooperativeResponse,
    CreateCooperativeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/cooperatives',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Obtenir tous les contrats
 */
export const listContractOffers = <ThrowOnError extends boolean = false>(
  options?: Options<ListContractOffersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListContractOffersResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/contracts',
    ...options,
  })
}

/**
 * Créer un contrat
 */
export const createContractOffer = <ThrowOnError extends boolean = false>(
  options: Options<CreateContractOfferData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateContractOfferResponse,
    CreateContractOfferError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/contracts',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Envoyer un message de contact
 * Permet à un visiteur d'envoyer un message via le formulaire de contact.
 */
export const sendContactMessage = <ThrowOnError extends boolean = false>(
  options: Options<SendContactMessageData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    SendContactMessageError,
    ThrowOnError
  >({
    url: '/api/contact',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Déconnecter l'utilisateur
 * Supprime le cookie JWT pour déconnecter l'utilisateur
 */
export const logout = <ThrowOnError extends boolean = false>(
  options?: Options<LogoutData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    unknown,
    ThrowOnError
  >({
    url: '/api/auth/signout',
    ...options,
  })
}

/**
 * Authentifier l'utilisateur
 * Authentifie un utilisateur et renvoie un token JWT sous forme de cookie HTTP-only ainsi que son UserDetailDto
 */
export const authenticateUser = <ThrowOnError extends boolean = false>(
  options: Options<AuthenticateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AuthenticateUserResponse,
    AuthenticateUserError,
    ThrowOnError
  >({
    url: '/api/auth/signin',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Obtenir toutes les enchères
 */
export const listAuctions = <ThrowOnError extends boolean = false>(
  options?: Options<ListAuctionsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListAuctionsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions',
    ...options,
  })
}

/**
 * Créer une enchère
 */
export const createAuction = <ThrowOnError extends boolean = false>(
  options: Options<CreateAuctionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateAuctionResponse,
    CreateAuctionError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Obtenir toutes les offres
 */
export const listBids = <ThrowOnError extends boolean = false>(
  options: Options<ListBidsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListBidsResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/{auctionId}/bids/',
    ...options,
  })
}

/**
 * Créer une offre
 */
export const createBid = <ThrowOnError extends boolean = false>(
  options: Options<CreateBidData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateBidResponse,
    CreateBidError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/{auctionId}/bids/',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Obtenir toutes les stratégies d'enchère
 */
export const listAuctionStrategies = <ThrowOnError extends boolean = false>(
  options?: Options<ListAuctionStrategiesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    unknown,
    ListAuctionStrategiesError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/strategies',
    ...options,
  })
}

/**
 * Créer une stratégie d'enchère
 */
export const createAuctionStrategy = <ThrowOnError extends boolean = false>(
  options: Options<CreateAuctionStrategyData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    unknown,
    CreateAuctionStrategyError,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/auctions/strategies',
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
  })
}

/**
 * Lister les documents par utilisateur
 */
export const listDocumentsByUser = <ThrowOnError extends boolean = false>(
  options: Options<ListDocumentsByUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    ListDocumentsByUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/documents/users/{userId}',
    ...options,
  })
}

/**
 * Récupérer l'utilisateur courant
 * Renvoie les détails (UserDetailDto) de l'utilisateur authentifié via le cookie JWT, cette méthode génère aussi un premier token csrf pour l'utilisateur
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<GetCurrentUserData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentUserResponse,
    GetCurrentUserError,
    ThrowOnError
  >({
    url: '/api/auth/me',
    ...options,
  })
}

/**
 * Récupère les données de l'application
 */
export const getApplicationData = <ThrowOnError extends boolean = false>(
  options?: Options<GetApplicationDataData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApplicationDataResponse,
    GetApplicationDataError,
    ThrowOnError
  >({
    url: '/api/app',
    ...options,
  })
}
