// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { DeleteFieldData, DeleteFieldResponse, DeleteFieldError, GetFieldData, GetFieldError, UpdateFieldData, UpdateFieldError, DeleteUserData, DeleteUserResponse, DeleteUserError, GetUserData, GetUserResponse, GetUserError, UpdateUserData, UpdateUserResponse, UpdateUserError, UpdateUserRolesData, UpdateUserRolesResponse, UpdateUserRolesError, DeleteStoreData, DeleteStoreResponse, DeleteStoreError, GetStoreData, GetStoreError, UpdateStoreData, UpdateStoreError, AddCarrierData, AddCarrierError, DeleteRegionData, DeleteRegionResponse, DeleteRegionError, GetRegionData, GetRegionError, UpdateRegionData, UpdateRegionError, DeleteQualityData, DeleteQualityResponse, DeleteQualityError, GetQualityData, GetQualityError, UpdateQualityData, UpdateQualityError, DeleteProductData, DeleteProductResponse, DeleteProductError, GetProductData, GetProductError, UpdateProductData, UpdateProductError, DeleteDocumentData, DeleteDocumentResponse, DeleteDocumentError, GetDocumentData, GetDocumentError, UpdateDocumentData, UpdateDocumentError, DeleteCooperativeData, DeleteCooperativeResponse, DeleteCooperativeError, GetCooperativeData, GetCooperativeError, UpdateCooperativeData, UpdateCooperativeError, DeleteContractOfferData, DeleteContractOfferResponse, DeleteContractOfferError, GetContractOfferData, GetContractOfferError, UpdateContractOfferData, UpdateContractOfferError, DeleteAuctionData, DeleteAuctionResponse, DeleteAuctionError, GetAuctionData, GetAuctionError, UpdateAuctionData, UpdateAuctionError, DeleteBidData, DeleteBidResponse, DeleteBidError, GetBidData, GetBidError, UpdateBidData, UpdateBidError, DeleteAuctionStrategyData, DeleteAuctionStrategyResponse, DeleteAuctionStrategyError, GetAuctionStrategyData, GetAuctionStrategyError, UpdateAuctionStrategyData, UpdateAuctionStrategyError, ListUsersData, ListUsersResponse, CreateUserData, CreateUserResponse, CreateUserError, ListFieldsData, ListFieldsError, CreateFieldData, CreateFieldError, AddRoleToUserData, AddRoleToUserResponse, AddRoleToUserError, ListStoresData, ListStoresError, CreateStoreData, CreateStoreError, ListRegionsData, ListRegionsError, CreateRegionData, CreateRegionError, ListQualitiesData, ListQualitiesError, CreateQualityData, CreateQualityError, ListProductsData, ListProductsError, CreateProductData, CreateProductError, CreateDocumentData, CreateDocumentError, ListCooperativesData, ListCooperativesError, CreateCooperativeData, CreateCooperativeError, ListContractOffersData, ListContractOffersError, CreateContractOfferData, CreateContractOfferError, LogoutData, AuthenticateUserData, AuthenticateUserResponse, AuthenticateUserError, ListAuctionsData, ListAuctionsResponse, CreateAuctionData, CreateAuctionError, ListBidsData, ListBidsError, CreateBidData, CreateBidError, ListAuctionStrategiesData, ListAuctionStrategiesError, CreateAuctionStrategyData, CreateAuctionStrategyError, ListDocumentsByUserData, ListDocumentsByUserError, GetCurrentUserData, GetCurrentUserResponse, GetCurrentUserError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Supprimer un champ
 */
export const deleteField = <ThrowOnError extends boolean = false>(options: Options<DeleteFieldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFieldResponse, DeleteFieldError, ThrowOnError>({
        url: '/api/users/{userId}/fields/{id}',
        ...options
    });
};

/**
 * Obtenir un champ
 */
export const getField = <ThrowOnError extends boolean = false>(options: Options<GetFieldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetFieldError, ThrowOnError>({
        url: '/api/users/{userId}/fields/{id}',
        ...options
    });
};

/**
 * Mettre à jour un champ
 */
export const updateField = <ThrowOnError extends boolean = false>(options: Options<UpdateFieldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateFieldError, ThrowOnError>({
        url: '/api/users/{userId}/fields/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Supprimer un utilisateur
 * Supprime un utilisateur en fonction de son identifiant.
 */
export const deleteUser = <ThrowOnError extends boolean = false>(options: Options<DeleteUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserResponse, DeleteUserError, ThrowOnError>({
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * Récupérer les détails d'un utilisateur
 * Renvoie les informations détaillées d'un utilisateur à partir de son ID.
 */
export const getUser = <ThrowOnError extends boolean = false>(options: Options<GetUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserResponse, GetUserError, ThrowOnError>({
        url: '/api/users/{id}',
        ...options
    });
};

/**
 * Mettre à jour un utilisateur
 * Met à jour un utilisateur existant en utilisant l'ID spécifié dans l'URL.
 */
export const updateUser = <ThrowOnError extends boolean = false>(options: Options<UpdateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserResponse, UpdateUserError, ThrowOnError>({
        url: '/api/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Mettre à jour les rôles d'un utilisateur
 * Remplace l'ensemble des rôles de l'utilisateur spécifié par la liste fournie.
 */
export const updateUserRoles = <ThrowOnError extends boolean = false>(options: Options<UpdateUserRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserRolesResponse, UpdateUserRolesError, ThrowOnError>({
        url: '/api/users/{id}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Supprimer un magasin
 */
export const deleteStore = <ThrowOnError extends boolean = false>(options: Options<DeleteStoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteStoreResponse, DeleteStoreError, ThrowOnError>({
        url: '/api/stores/{id}',
        ...options
    });
};

/**
 * Obtenir un magasin
 */
export const getStore = <ThrowOnError extends boolean = false>(options: Options<GetStoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetStoreError, ThrowOnError>({
        url: '/api/stores/{id}',
        ...options
    });
};

/**
 * Mettre à jour un magasin
 */
export const updateStore = <ThrowOnError extends boolean = false>(options: Options<UpdateStoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateStoreError, ThrowOnError>({
        url: '/api/stores/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Associer un transporteur à une région
 */
export const addCarrier = <ThrowOnError extends boolean = false>(options: Options<AddCarrierData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, AddCarrierError, ThrowOnError>({
        url: '/api/regions/{regionId}/carriers/{carrierId}',
        ...options
    });
};

/**
 * Supprimer une région
 */
export const deleteRegion = <ThrowOnError extends boolean = false>(options: Options<DeleteRegionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteRegionResponse, DeleteRegionError, ThrowOnError>({
        url: '/api/regions/{id}',
        ...options
    });
};

/**
 * Obtenir une région par ID
 */
export const getRegion = <ThrowOnError extends boolean = false>(options: Options<GetRegionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetRegionError, ThrowOnError>({
        url: '/api/regions/{id}',
        ...options
    });
};

/**
 * Mettre à jour une région
 */
export const updateRegion = <ThrowOnError extends boolean = false>(options: Options<UpdateRegionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateRegionError, ThrowOnError>({
        url: '/api/regions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Supprimer une qualité
 */
export const deleteQuality = <ThrowOnError extends boolean = false>(options: Options<DeleteQualityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteQualityResponse, DeleteQualityError, ThrowOnError>({
        url: '/api/qualities/{id}',
        ...options
    });
};

/**
 * Obtenir une qualité
 */
export const getQuality = <ThrowOnError extends boolean = false>(options: Options<GetQualityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetQualityError, ThrowOnError>({
        url: '/api/qualities/{id}',
        ...options
    });
};

/**
 * Mettre à jour une qualité
 */
export const updateQuality = <ThrowOnError extends boolean = false>(options: Options<UpdateQualityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateQualityError, ThrowOnError>({
        url: '/api/qualities/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Supprimer un produit
 */
export const deleteProduct = <ThrowOnError extends boolean = false>(options: Options<DeleteProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteProductResponse, DeleteProductError, ThrowOnError>({
        url: '/api/products/{id}',
        ...options
    });
};

/**
 * Obtenir un produit
 */
export const getProduct = <ThrowOnError extends boolean = false>(options: Options<GetProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetProductError, ThrowOnError>({
        url: '/api/products/{id}',
        ...options
    });
};

/**
 * Mettre à jour un produit
 */
export const updateProduct = <ThrowOnError extends boolean = false>(options: Options<UpdateProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateProductError, ThrowOnError>({
        url: '/api/products/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Supprimer un document
 */
export const deleteDocument = <ThrowOnError extends boolean = false>(options: Options<DeleteDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteDocumentResponse, DeleteDocumentError, ThrowOnError>({
        url: '/api/documents/{id}',
        ...options
    });
};

/**
 * Obtenir un document
 */
export const getDocument = <ThrowOnError extends boolean = false>(options: Options<GetDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetDocumentError, ThrowOnError>({
        url: '/api/documents/{id}',
        ...options
    });
};

/**
 * Mettre à jour un document
 */
export const updateDocument = <ThrowOnError extends boolean = false>(options: Options<UpdateDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateDocumentError, ThrowOnError>({
        url: '/api/documents/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Supprimer une coopérative
 */
export const deleteCooperative = <ThrowOnError extends boolean = false>(options: Options<DeleteCooperativeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCooperativeResponse, DeleteCooperativeError, ThrowOnError>({
        url: '/api/cooperatives/{id}',
        ...options
    });
};

/**
 * Obtenir une coopérative
 */
export const getCooperative = <ThrowOnError extends boolean = false>(options: Options<GetCooperativeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetCooperativeError, ThrowOnError>({
        url: '/api/cooperatives/{id}',
        ...options
    });
};

/**
 * Mettre à jour une coopérative
 */
export const updateCooperative = <ThrowOnError extends boolean = false>(options: Options<UpdateCooperativeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateCooperativeError, ThrowOnError>({
        url: '/api/cooperatives/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Supprimer un contrat
 */
export const deleteContractOffer = <ThrowOnError extends boolean = false>(options: Options<DeleteContractOfferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteContractOfferResponse, DeleteContractOfferError, ThrowOnError>({
        url: '/api/contracts/{id}',
        ...options
    });
};

/**
 * Obtenir un contrat
 */
export const getContractOffer = <ThrowOnError extends boolean = false>(options: Options<GetContractOfferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetContractOfferError, ThrowOnError>({
        url: '/api/contracts/{id}',
        ...options
    });
};

/**
 * Mettre à jour un contrat
 */
export const updateContractOffer = <ThrowOnError extends boolean = false>(options: Options<UpdateContractOfferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateContractOfferError, ThrowOnError>({
        url: '/api/contracts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Supprimer une enchère
 */
export const deleteAuction = <ThrowOnError extends boolean = false>(options: Options<DeleteAuctionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAuctionResponse, DeleteAuctionError, ThrowOnError>({
        url: '/api/auctions/{id}',
        ...options
    });
};

/**
 * Obtenir une enchère
 */
export const getAuction = <ThrowOnError extends boolean = false>(options: Options<GetAuctionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetAuctionError, ThrowOnError>({
        url: '/api/auctions/{id}',
        ...options
    });
};

/**
 * Mettre à jour une enchère
 */
export const updateAuction = <ThrowOnError extends boolean = false>(options: Options<UpdateAuctionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateAuctionError, ThrowOnError>({
        url: '/api/auctions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Supprimer une offre
 */
export const deleteBid = <ThrowOnError extends boolean = false>(options: Options<DeleteBidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteBidResponse, DeleteBidError, ThrowOnError>({
        url: '/api/auctions/{auctionId}/bids/{bidId}',
        ...options
    });
};

/**
 * Obtenir une offre
 */
export const getBid = <ThrowOnError extends boolean = false>(options: Options<GetBidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetBidError, ThrowOnError>({
        url: '/api/auctions/{auctionId}/bids/{bidId}',
        ...options
    });
};

/**
 * Mettre à jour une offre
 */
export const updateBid = <ThrowOnError extends boolean = false>(options: Options<UpdateBidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateBidError, ThrowOnError>({
        url: '/api/auctions/{auctionId}/bids/{bidId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Supprimer une stratégie d'enchère
 */
export const deleteAuctionStrategy = <ThrowOnError extends boolean = false>(options: Options<DeleteAuctionStrategyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAuctionStrategyResponse, DeleteAuctionStrategyError, ThrowOnError>({
        url: '/api/auctions/strategies/{id}',
        ...options
    });
};

/**
 * Obtenir une stratégie d'enchère
 */
export const getAuctionStrategy = <ThrowOnError extends boolean = false>(options: Options<GetAuctionStrategyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, GetAuctionStrategyError, ThrowOnError>({
        url: '/api/auctions/strategies/{id}',
        ...options
    });
};

/**
 * Mettre à jour une stratégie d'enchère
 */
export const updateAuctionStrategy = <ThrowOnError extends boolean = false>(options: Options<UpdateAuctionStrategyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UpdateAuctionStrategyError, ThrowOnError>({
        url: '/api/auctions/strategies/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Lister tous les utilisateurs
 * Renvoie la liste de tous les utilisateurs présents dans le système.
 */
export const listUsers = <ThrowOnError extends boolean = false>(options?: Options<ListUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListUsersResponse, unknown, ThrowOnError>({
        url: '/api/users',
        ...options
    });
};

/**
 * Créer un utilisateur
 * Crée un nouvel utilisateur dans le système.
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponse, CreateUserError, ThrowOnError>({
        url: '/api/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtenir tous les champs d’un utilisateur
 */
export const listFields = <ThrowOnError extends boolean = false>(options: Options<ListFieldsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, ListFieldsError, ThrowOnError>({
        url: '/api/users/{userId}/fields',
        ...options
    });
};

/**
 * Créer un champ
 */
export const createField = <ThrowOnError extends boolean = false>(options: Options<CreateFieldData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateFieldError, ThrowOnError>({
        url: '/api/users/{userId}/fields',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Ajouter un rôle à un utilisateur
 * Ajoute un rôle spécifique à l'utilisateur en utilisant le nom du rôle.
 */
export const addRoleToUser = <ThrowOnError extends boolean = false>(options: Options<AddRoleToUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddRoleToUserResponse, AddRoleToUserError, ThrowOnError>({
        url: '/api/users/{id}/roles/{roleName}',
        ...options
    });
};

/**
 * Obtenir tous les magasins
 */
export const listStores = <ThrowOnError extends boolean = false>(options?: Options<ListStoresData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, ListStoresError, ThrowOnError>({
        url: '/api/stores',
        ...options
    });
};

/**
 * Créer un magasin
 */
export const createStore = <ThrowOnError extends boolean = false>(options: Options<CreateStoreData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateStoreError, ThrowOnError>({
        url: '/api/stores',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Lister toutes les régions
 */
export const listRegions = <ThrowOnError extends boolean = false>(options?: Options<ListRegionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, ListRegionsError, ThrowOnError>({
        url: '/api/regions',
        ...options
    });
};

/**
 * Créer une nouvelle région
 */
export const createRegion = <ThrowOnError extends boolean = false>(options: Options<CreateRegionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateRegionError, ThrowOnError>({
        url: '/api/regions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtenir toutes les qualités
 */
export const listQualities = <ThrowOnError extends boolean = false>(options?: Options<ListQualitiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, ListQualitiesError, ThrowOnError>({
        url: '/api/qualities',
        ...options
    });
};

/**
 * Créer une qualité
 */
export const createQuality = <ThrowOnError extends boolean = false>(options: Options<CreateQualityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateQualityError, ThrowOnError>({
        url: '/api/qualities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtenir tous les produits
 */
export const listProducts = <ThrowOnError extends boolean = false>(options?: Options<ListProductsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, ListProductsError, ThrowOnError>({
        url: '/api/products',
        ...options
    });
};

/**
 * Créer un produit
 */
export const createProduct = <ThrowOnError extends boolean = false>(options: Options<CreateProductData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateProductError, ThrowOnError>({
        url: '/api/products',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Créer un document
 */
export const createDocument = <ThrowOnError extends boolean = false>(options: Options<CreateDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateDocumentError, ThrowOnError>({
        url: '/api/documents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Lister toutes les coopératives
 */
export const listCooperatives = <ThrowOnError extends boolean = false>(options?: Options<ListCooperativesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, ListCooperativesError, ThrowOnError>({
        url: '/api/cooperatives',
        ...options
    });
};

/**
 * Créer une coopérative
 */
export const createCooperative = <ThrowOnError extends boolean = false>(options: Options<CreateCooperativeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateCooperativeError, ThrowOnError>({
        url: '/api/cooperatives',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtenir tous les contrats
 */
export const listContractOffers = <ThrowOnError extends boolean = false>(options?: Options<ListContractOffersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, ListContractOffersError, ThrowOnError>({
        url: '/api/contracts',
        ...options
    });
};

/**
 * Créer un contrat
 */
export const createContractOffer = <ThrowOnError extends boolean = false>(options: Options<CreateContractOfferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateContractOfferError, ThrowOnError>({
        url: '/api/contracts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Déconnecter l'utilisateur
 * Supprime le cookie JWT pour déconnecter l'utilisateur
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/auth/signout',
        ...options
    });
};

/**
 * Authentifier l'utilisateur
 * Authentifie un utilisateur et renvoie un token JWT sous forme de cookie HTTP-only ainsi que son UserDetailDto
 */
export const authenticateUser = <ThrowOnError extends boolean = false>(options: Options<AuthenticateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthenticateUserResponse, AuthenticateUserError, ThrowOnError>({
        url: '/api/auth/signin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtenir toutes les enchères
 */
export const listAuctions = <ThrowOnError extends boolean = false>(options?: Options<ListAuctionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAuctionsResponse, unknown, ThrowOnError>({
        url: '/api/auctions',
        ...options
    });
};

/**
 * Créer une enchère
 */
export const createAuction = <ThrowOnError extends boolean = false>(options: Options<CreateAuctionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateAuctionError, ThrowOnError>({
        url: '/api/auctions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtenir toutes les offres
 */
export const listBids = <ThrowOnError extends boolean = false>(options: Options<ListBidsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, ListBidsError, ThrowOnError>({
        url: '/api/auctions/{auctionId}/bids/',
        ...options
    });
};

/**
 * Créer une offre
 */
export const createBid = <ThrowOnError extends boolean = false>(options: Options<CreateBidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateBidError, ThrowOnError>({
        url: '/api/auctions/{auctionId}/bids/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Obtenir toutes les stratégies d'enchère
 */
export const listAuctionStrategies = <ThrowOnError extends boolean = false>(options?: Options<ListAuctionStrategiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, ListAuctionStrategiesError, ThrowOnError>({
        url: '/api/auctions/strategies',
        ...options
    });
};

/**
 * Créer une stratégie d'enchère
 */
export const createAuctionStrategy = <ThrowOnError extends boolean = false>(options: Options<CreateAuctionStrategyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, CreateAuctionStrategyError, ThrowOnError>({
        url: '/api/auctions/strategies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Lister les documents par utilisateur
 */
export const listDocumentsByUser = <ThrowOnError extends boolean = false>(options: Options<ListDocumentsByUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, ListDocumentsByUserError, ThrowOnError>({
        url: '/api/documents/users/{userId}',
        ...options
    });
};

/**
 * Récupérer l'utilisateur courant
 * Renvoie les détails (UserDetailDto) de l'utilisateur authentifié via le cookie JWT
 */
export const getCurrentUser = <ThrowOnError extends boolean = false>(options?: Options<GetCurrentUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCurrentUserResponse, GetCurrentUserError, ThrowOnError>({
        url: '/api/auth/me',
        ...options
    });
};