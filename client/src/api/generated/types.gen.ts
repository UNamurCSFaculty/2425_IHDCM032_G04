// This file is auto-generated by @hey-api/openapi-ts

/**
 * Représente une coopérative.
 */
export type CooperativeDtoReadable = {
    /**
     * Identifiant de la coopérative
     */
    readonly id?: number;
    /**
     * Nom de la coopérative
     */
    name: string;
    /**
     * Adresse de la coopérative
     */
    address: string;
    /**
     * Date de création
     */
    creationDate: string;
    /**
     * Président de la coopérative
     */
    presidentId: number;
};

/**
 * Représente une coopérative.
 */
export type CooperativeDtoWritable = {
    /**
     * Nom de la coopérative
     */
    name: string;
    /**
     * Adresse de la coopérative
     */
    address: string;
    /**
     * Date de création
     */
    creationDate: string;
    /**
     * Président de la coopérative
     */
    presidentId: number;
};

/**
 * Objet de transfert de données pour les champs.
 */
export type FieldDtoReadable = {
    /**
     * Identifiant unique du champ.
     */
    readonly id?: number;
    /**
     * Identifiant du champ (code unique)
     */
    identifier?: string;
    /**
     * Emplacement géographique du champ (format WKT ou GeoJSON selon l'usage).
     */
    location?: string;
    /**
     * Producteur associé au champ.
     */
    producer?: ProducerDetailDtoReadable;
};

/**
 * Objet de transfert de données pour les champs.
 */
export type FieldDtoWritable = {
    /**
     * Identifiant du champ (code unique)
     */
    identifier?: string;
    /**
     * Emplacement géographique du champ (format WKT ou GeoJSON selon l'usage).
     */
    location?: string;
    /**
     * Producteur associé au champ.
     */
    producer?: ProducerDetailDtoWritable;
};

/**
 * Objet de transfert de données pour une langue.
 */
export type LanguageDtoReadable = {
    /**
     * Identifiant de la langue
     */
    readonly id?: number;
    /**
     * Nom de la langue
     */
    name: string;
};

/**
 * Objet de transfert de données pour une langue.
 */
export type LanguageDtoWritable = {
    /**
     * Nom de la langue
     */
    name: string;
};

/**
 * Objet de transfert de données pour les producteurs.
 */
export type ProducerDetailDtoReadable = {
    /**
     * Identifiant de l'utilisateur
     */
    readonly id?: number;
    /**
     * Prénom de l'utilisateur
     */
    firstName: string;
    /**
     * Nom de famille de l'utilisateur
     */
    lastName: string;
    /**
     * Adresse email de l'utilisateur
     */
    email: string;
    /**
     * Date d'enregistrement
     */
    readonly registrationDate?: string;
    /**
     * Date de validation
     */
    readonly validationDate?: string;
    /**
     * Compte activé
     */
    enabled?: boolean;
    /**
     * Adresse postale de l'utilisateur
     */
    address?: string;
    /**
     * Numéro de téléphone (Bénin, ancien et nouveau formats)
     */
    phone?: string;
    /**
     * Liste des rôles de l'utilisateur
     */
    readonly roles?: Array<RoleDtoReadable>;
    /**
     * Identifiant de la langue préférée
     */
    language: LanguageDtoReadable;
    /**
     * Identifiant agricole
     */
    agriculturalIdentifier: string;
    /**
     * Coopérative du producteur
     */
    cooperative?: CooperativeDtoReadable;
    /**
     * Type d'utilisateur. Valeurs possibles: admin, producer, transformer, quality_inspector, exporter, carrier
     */
    type: 'admin' | 'producer' | 'transformer' | 'quality_inspector' | 'exporter' | 'carrier';
};

/**
 * Objet de transfert de données pour les producteurs.
 */
export type ProducerDetailDtoWritable = {
    /**
     * Prénom de l'utilisateur
     */
    firstName: string;
    /**
     * Nom de famille de l'utilisateur
     */
    lastName: string;
    /**
     * Adresse email de l'utilisateur
     */
    email: string;
    /**
     * Compte activé
     */
    enabled?: boolean;
    /**
     * Adresse postale de l'utilisateur
     */
    address?: string;
    /**
     * Numéro de téléphone (Bénin, ancien et nouveau formats)
     */
    phone?: string;
    /**
     * Mot de passe de l'utilisateur
     */
    password?: string;
    /**
     * Identifiant de la langue préférée
     */
    language: LanguageDtoWritable;
    /**
     * Identifiant agricole
     */
    agriculturalIdentifier: string;
    /**
     * Coopérative du producteur
     */
    cooperative?: CooperativeDtoWritable;
    /**
     * Type d'utilisateur. Valeurs possibles: admin, producer, transformer, quality_inspector, exporter, carrier
     */
    type: 'admin' | 'producer' | 'transformer' | 'quality_inspector' | 'exporter' | 'carrier';
};

/**
 * Objet de transfert de données pour les rôles.
 */
export type RoleDtoReadable = {
    /**
     * Identifiant unique du rôle
     */
    readonly id?: number;
    /**
     * Nom du rôle
     */
    name: string;
};

/**
 * Objet de transfert de données pour les rôles.
 */
export type RoleDtoWritable = {
    /**
     * Nom du rôle
     */
    name: string;
};

export type ApiError = {
    /**
     * human-readable error message
     */
    message?: string;
    errors?: Array<ApiErrorErrors>;
};

export type ApiErrorErrors = {
    /**
     * For input validation errors, identifies where in the  JSON request body the error occurred.
     */
    path?: string;
    /**
     * Human-readable error message.
     */
    message?: string;
    /**
     * Code indicating error type.
     */
    errorCode?: string;
};

/**
 * Objet de transfert de données pour les administrateurs.
 */
export type AdminDetailDtoReadable = UserDetailDtoReadable;

/**
 * Objet de transfert de données pour les administrateurs.
 */
export type AdminDetailDtoWritable = UserDetailDtoWritable;

/**
 * Objet de transfert de données pour les transporteurs.
 */
export type CarrierDetailDtoReadable = UserDetailDtoReadable & {
    /**
     * Prix par kilomètre facturé par le transporteur
     */
    pricePerKm: number;
    /**
     * Liste des identifiants des régions desservies par le transporteur
     */
    regionIds: Array<number>;
};

/**
 * Objet de transfert de données pour les transporteurs.
 */
export type CarrierDetailDtoWritable = UserDetailDtoWritable & {
    /**
     * Prix par kilomètre facturé par le transporteur
     */
    pricePerKm: number;
    /**
     * Liste des identifiants des régions desservies par le transporteur
     */
    regionIds: Array<number>;
};

/**
 * Objet de transfert de données pour les exportateurs.
 */
export type ExporterDetailDtoReadable = TraderDetailDtoReadable;

/**
 * Objet de transfert de données pour les exportateurs.
 */
export type ExporterDetailDtoWritable = TraderDetailDtoWritable;

/**
 * Objet de transfert de données pour les inspecteurs qualité.
 */
export type QualityInspectorDetailDtoReadable = UserDetailDtoReadable;

/**
 * Objet de transfert de données pour les inspecteurs qualité.
 */
export type QualityInspectorDetailDtoWritable = UserDetailDtoWritable;

/**
 * Objet de transfert de données pour les traders.
 */
export type TraderDetailDtoReadable = UserDetailDtoReadable;

/**
 * Objet de transfert de données pour les traders.
 */
export type TraderDetailDtoWritable = UserDetailDtoWritable;

/**
 * Objet de transfert de données pour les transformateurs.
 */
export type TransformerDetailDtoReadable = {
    /**
     * Identifiant de l'utilisateur
     */
    readonly id?: number;
    /**
     * Prénom de l'utilisateur
     */
    firstName: string;
    /**
     * Nom de famille de l'utilisateur
     */
    lastName: string;
    /**
     * Adresse email de l'utilisateur
     */
    email: string;
    /**
     * Date d'enregistrement
     */
    readonly registrationDate?: string;
    /**
     * Date de validation
     */
    readonly validationDate?: string;
    /**
     * Compte activé
     */
    enabled?: boolean;
    /**
     * Adresse postale de l'utilisateur
     */
    address?: string;
    /**
     * Numéro de téléphone (Bénin, ancien et nouveau formats)
     */
    phone?: string;
    /**
     * Liste des rôles de l'utilisateur
     */
    readonly roles?: Array<RoleDtoReadable>;
    /**
     * Identifiant de la langue préférée
     */
    language: LanguageDtoReadable;
    /**
     * Type d'utilisateur. Valeurs possibles: admin, producer, transformer, quality_inspector, exporter, carrier
     */
    type: 'admin' | 'producer' | 'transformer' | 'quality_inspector' | 'exporter' | 'carrier';
};

/**
 * Objet de transfert de données pour les transformateurs.
 */
export type TransformerDetailDtoWritable = {
    /**
     * Prénom de l'utilisateur
     */
    firstName: string;
    /**
     * Nom de famille de l'utilisateur
     */
    lastName: string;
    /**
     * Adresse email de l'utilisateur
     */
    email: string;
    /**
     * Compte activé
     */
    enabled?: boolean;
    /**
     * Adresse postale de l'utilisateur
     */
    address?: string;
    /**
     * Numéro de téléphone (Bénin, ancien et nouveau formats)
     */
    phone?: string;
    /**
     * Mot de passe de l'utilisateur
     */
    password?: string;
    /**
     * Identifiant de la langue préférée
     */
    language: LanguageDtoWritable;
    /**
     * Type d'utilisateur. Valeurs possibles: admin, producer, transformer, quality_inspector, exporter, carrier
     */
    type: 'admin' | 'producer' | 'transformer' | 'quality_inspector' | 'exporter' | 'carrier';
};

/**
 * Data Transfer Object pour un utilisateur avec toutes les informations
 */
export type UserDetailDtoReadable = {
    /**
     * Identifiant de l'utilisateur
     */
    readonly id?: number;
    /**
     * Prénom de l'utilisateur
     */
    firstName: string;
    /**
     * Nom de famille de l'utilisateur
     */
    lastName: string;
    /**
     * Adresse email de l'utilisateur
     */
    email: string;
    /**
     * Date d'enregistrement
     */
    readonly registrationDate?: string;
    /**
     * Date de validation
     */
    readonly validationDate?: string;
    /**
     * Compte activé
     */
    enabled?: boolean;
    /**
     * Adresse postale de l'utilisateur
     */
    address?: string;
    /**
     * Numéro de téléphone (Bénin, ancien et nouveau formats)
     */
    phone?: string;
    /**
     * Liste des rôles de l'utilisateur
     */
    readonly roles?: Array<RoleDtoReadable>;
    /**
     * Identifiant de la langue préférée
     */
    language: LanguageDtoReadable;
    /**
     * Type d'utilisateur. Valeurs possibles: admin, producer, transformer, quality_inspector, exporter, carrier
     */
    type: 'admin' | 'producer' | 'transformer' | 'quality_inspector' | 'exporter' | 'carrier';
};

/**
 * Data Transfer Object pour un utilisateur avec toutes les informations
 */
export type UserDetailDtoWritable = {
    /**
     * Prénom de l'utilisateur
     */
    firstName: string;
    /**
     * Nom de famille de l'utilisateur
     */
    lastName: string;
    /**
     * Adresse email de l'utilisateur
     */
    email: string;
    /**
     * Compte activé
     */
    enabled?: boolean;
    /**
     * Adresse postale de l'utilisateur
     */
    address?: string;
    /**
     * Numéro de téléphone (Bénin, ancien et nouveau formats)
     */
    phone?: string;
    /**
     * Mot de passe de l'utilisateur
     */
    password?: string;
    /**
     * Identifiant de la langue préférée
     */
    language: LanguageDtoWritable;
    /**
     * Type d'utilisateur. Valeurs possibles: admin, producer, transformer, quality_inspector, exporter, carrier
     */
    type: 'admin' | 'producer' | 'transformer' | 'quality_inspector' | 'exporter' | 'carrier';
};

/**
 * Réponse d'erreur standardisée
 */
export type ApiErrorResponse = {
    /**
     * Code HTTP de la réponse
     */
    status: number;
    /**
     * Horodatage de l'erreur
     */
    timestamp: string;
    /**
     * Chemin de la requête ayant provoqué l'erreur
     */
    path: string;
    /**
     * Code interne d'erreur
     */
    code: string;
    /**
     * Liste des erreurs détaillées
     */
    errors: Array<ErrorDetail>;
};

/**
 * Détail d'une erreur individuelle
 */
export type ErrorDetail = {
    /**
     * Nom du champ en erreur (absent pour erreurs globales)
     */
    field?: string;
    /**
     * Message décrivant l'erreur
     */
    message: string;
};

/**
 * Objet de transfert de données pour un entrepôt (store).
 */
export type StoreDetailDtoReadable = {
    /**
     * Identifiant du store
     */
    readonly id?: number;
    /**
     * Coordonnées géographiques du store (au format GeoJSON, WKT ou équivalent)
     */
    location: string;
    /**
     * Identifiant de l'utilisateur lié au store
     */
    userId: number;
};

/**
 * Objet de transfert de données pour un entrepôt (store).
 */
export type StoreDetailDtoWritable = {
    /**
     * Coordonnées géographiques du store (au format GeoJSON, WKT ou équivalent)
     */
    location: string;
    /**
     * Identifiant de l'utilisateur lié au store
     */
    userId: number;
};

/**
 * Objet de transfert de données pour une région.
 */
export type RegionDtoReadable = {
    /**
     * Identifiant unique de la région
     */
    readonly id?: number;
    /**
     * Nom de la région
     */
    name: string;
};

/**
 * Objet de transfert de données pour une région.
 */
export type RegionDtoWritable = {
    /**
     * Nom de la région
     */
    name: string;
};

/**
 * Représente une qualité de produit.
 */
export type QualityDtoReadable = {
    /**
     * Identifiant de la qualité
     */
    readonly id?: number;
    /**
     * Nom de la qualité
     */
    name: string;
};

/**
 * Représente une qualité de produit.
 */
export type QualityDtoWritable = {
    /**
     * Nom de la qualité
     */
    name: string;
};

/**
 * Objet de transfert de données pour les produits récoltés.
 */
export type HarvestProductDtoReadable = ProductDtoReadable & {
    type: 'harvest';
} & {
    /**
     * Magasin associé au produit récolté
     */
    store: StoreDetailDtoReadable;
    /**
     * Producteur associé au produit récolté
     */
    producer: ProducerDetailDtoReadable;
    /**
     * Champ associé au produit récolté
     */
    field: FieldDtoReadable;
};

/**
 * Objet de transfert de données pour les produits récoltés.
 */
export type HarvestProductDtoWritable = ProductDtoWritable & {
    type: 'harvest';
} & {
    /**
     * Magasin associé au produit récolté
     */
    store: StoreDetailDtoWritable;
    /**
     * Producteur associé au produit récolté
     */
    producer: ProducerDetailDtoWritable;
    /**
     * Champ associé au produit récolté
     */
    field: FieldDtoWritable;
};

/**
 * Data Transfer Object pour un produit
 */
export type ProductDtoReadable = {
    /**
     * Identifiant unique du produit
     */
    readonly id?: number;
    deliveryDate?: string;
    /**
     * Poids en kg du produit
     */
    weightKg?: number;
    qualityControlId?: number;
    /**
     * Type de produit.
     */
    type: 'harvest' | 'transformed';
};

/**
 * Data Transfer Object pour un produit
 */
export type ProductDtoWritable = {
    deliveryDate?: string;
    /**
     * Poids en kg du produit
     */
    weightKg?: number;
    qualityControlId?: number;
    /**
     * Type de produit.
     */
    type: 'harvest' | 'transformed';
};

/**
 * Objet de transfert de données pour les produits transformés.
 */
export type TransformedProductDtoReadable = ProductDtoReadable & {
    type: 'transformed';
} & {
    /**
     * Identifiant du produit transformé
     */
    identifier: string;
    /**
     * Emplacement du produit transformé
     */
    location: string;
    /**
     * Transformateur associé
     */
    transformer: TransformerDetailDtoReadable;
};

/**
 * Objet de transfert de données pour les produits transformés.
 */
export type TransformedProductDtoWritable = ProductDtoWritable & {
    type: 'transformed';
} & {
    /**
     * Identifiant du produit transformé
     */
    identifier: string;
    /**
     * Emplacement du produit transformé
     */
    location: string;
    /**
     * Transformateur associé
     */
    transformer: TransformerDetailDtoWritable;
};

/**
 * Objet de transfert de données pour les entités Document.
 */
export type DocumentDtoReadable = {
    /**
     * Identifiant unique du document
     */
    readonly id?: number;
    /**
     * Type de document
     */
    documentType: string;
    /**
     * Format du document
     */
    format: string;
    /**
     * Chemin de stockage du document
     */
    storagePath: string;
    /**
     * Date et heure de l'envoi du document
     */
    readonly uploadDate?: string;
    /**
     * Identifiant de l'utilisateur associé au document
     */
    userId: number;
};

/**
 * Objet de transfert de données pour les entités Document.
 */
export type DocumentDtoWritable = {
    /**
     * Type de document
     */
    documentType: string;
    /**
     * Format du document
     */
    format: string;
    /**
     * Chemin de stockage du document
     */
    storagePath: string;
    /**
     * Identifiant de l'utilisateur associé au document
     */
    userId: number;
};

/**
 * Objet de transfert de données pour les offres de contrat.
 */
export type ContractOfferDtoReadable = {
    /**
     * Identifiant unique de l'offre de contrat
     */
    readonly id?: number;
    /**
     * Statut de l'offre de contrat
     */
    status: string;
    /**
     * Prix par kilogramme proposé
     */
    pricePerKg: number;
    /**
     * Date de création de l'offre
     */
    readonly creationDate: string;
    /**
     * Date de terminaison de l'offre
     */
    endDate: string;
    /**
     * Vendeur associé à l'offre
     */
    seller: ExporterDetailDtoReadable | ProducerDetailDtoReadable | TransformerDetailDtoReadable;
    /**
     * Acheteur associé à l'offre
     */
    buyer: ExporterDetailDtoReadable | ProducerDetailDtoReadable | TransformerDetailDtoReadable;
    /**
     * Qualité associée à l'offre
     */
    quality: QualityDtoReadable;
};

/**
 * Objet de transfert de données pour les offres de contrat.
 */
export type ContractOfferDtoWritable = {
    /**
     * Statut de l'offre de contrat
     */
    status: string;
    /**
     * Prix par kilogramme proposé
     */
    pricePerKg: number;
    /**
     * Date de terminaison de l'offre
     */
    endDate: string;
    /**
     * Vendeur associé à l'offre
     */
    seller: ExporterDetailDtoWritable | ProducerDetailDtoWritable | TransformerDetailDtoWritable;
    /**
     * Acheteur associé à l'offre
     */
    buyer: ExporterDetailDtoWritable | ProducerDetailDtoWritable | TransformerDetailDtoWritable;
    /**
     * Qualité associée à l'offre
     */
    quality: QualityDtoWritable;
};

/**
 * Objet de transfert de données pour les enchères.
 */
export type AuctionDtoReadable = {
    /**
     * Identifiant unique de l'enchère
     */
    readonly id?: number;
    /**
     * Prix de l'enchère
     */
    price: number;
    /**
     * Quantité de produit associée à l'enchère
     */
    productQuantity: number;
    /**
     * Date d'expiration de l'enchère
     */
    expirationDate: string;
    /**
     * Date de création de l'enchère
     */
    readonly creationDate?: string;
    /**
     * Statut actif de l'enchère
     */
    active: boolean;
    /**
     * Stratégie d'enchère associée
     */
    strategy: AuctionStrategyDtoReadable;
    /**
     * Produit associé à l'enchère
     */
    product: HarvestProductDtoReadable | TransformedProductDtoReadable;
    /**
     * Valeurs d'option associées à l'enchère
     */
    auctionOptionValues?: Array<AuctionOptionValueDtoReadable>;
};

/**
 * Objet de transfert de données pour les enchères.
 */
export type AuctionDtoWritable = {
    /**
     * Prix de l'enchère
     */
    price: number;
    /**
     * Quantité de produit associée à l'enchère
     */
    productQuantity: number;
    /**
     * Date d'expiration de l'enchère
     */
    expirationDate: string;
    /**
     * Statut actif de l'enchère
     */
    active: boolean;
    /**
     * Stratégie d'enchère associée
     */
    strategy: AuctionStrategyDtoWritable;
    /**
     * Produit associé à l'enchère
     */
    product: HarvestProductDtoWritable | TransformedProductDtoWritable;
    /**
     * Valeurs d'option associées à l'enchère
     */
    auctionOptionValues?: Array<AuctionOptionValueDtoWritable>;
};

/**
 * Objet de transfert de données pour les options d'enchère.
 */
export type AuctionOptionDtoReadable = {
    /**
     * Identifiant unique de l'option d'enchère
     */
    readonly id?: number;
    /**
     * Nom de l'option d'enchère
     */
    name: string;
};

/**
 * Objet de transfert de données pour les options d'enchère.
 */
export type AuctionOptionDtoWritable = {
    /**
     * Nom de l'option d'enchère
     */
    name: string;
};

/**
 * Objet de transfert de données pour les valeurs d'option d'enchère.
 */
export type AuctionOptionValueDtoReadable = {
    /**
     * Identifiant unique de la valeur d'option d'enchère
     */
    readonly id?: number;
    /**
     * Option d'enchère associée
     */
    auctionOption: AuctionOptionDtoReadable;
    /**
     * Valeur de l'option
     */
    optionValue: string;
};

/**
 * Objet de transfert de données pour les valeurs d'option d'enchère.
 */
export type AuctionOptionValueDtoWritable = {
    /**
     * Option d'enchère associée
     */
    auctionOption: AuctionOptionDtoWritable;
    /**
     * Valeur de l'option
     */
    optionValue: string;
};

/**
 * Objet de transfert de données pour les stratégies d'enchère.
 */
export type AuctionStrategyDtoReadable = {
    /**
     * Identifiant unique de la stratégie d'enchère
     */
    readonly id?: number;
    /**
     * Nom de la stratégie d'enchère
     */
    name: string;
};

/**
 * Objet de transfert de données pour les stratégies d'enchère.
 */
export type AuctionStrategyDtoWritable = {
    /**
     * Nom de la stratégie d'enchère
     */
    name: string;
};

/**
 * Objet de transfert de données pour les offres d'achat (Bid).
 */
export type BidDtoReadable = {
    /**
     * Identifiant unique de l'offre d'achat
     */
    readonly id?: number;
    /**
     * Montant de l'offre
     */
    amount: number;
    /**
     * Date de l'enchère
     */
    auctionDate: string;
    /**
     * Date de création de l'offre
     */
    readonly creationDate?: string;
    /**
     * Enchère associée à l'offre
     */
    auction: AuctionDtoReadable;
    /**
     * Trader ayant passé l'offre
     */
    trader: ExporterDetailDtoReadable | ProducerDetailDtoReadable | TransformerDetailDtoReadable;
    /**
     * Statut de l'offre
     */
    status: BidStatusDtoReadable;
};

/**
 * Objet de transfert de données pour les offres d'achat (Bid).
 */
export type BidDtoWritable = {
    /**
     * Montant de l'offre
     */
    amount: number;
    /**
     * Date de l'enchère
     */
    auctionDate: string;
    /**
     * Enchère associée à l'offre
     */
    auction: AuctionDtoWritable;
    /**
     * Trader ayant passé l'offre
     */
    trader: ExporterDetailDtoWritable | ProducerDetailDtoWritable | TransformerDetailDtoWritable;
    /**
     * Statut de l'offre
     */
    status: BidStatusDtoWritable;
};

/**
 * Objet de transfert de données pour le statut d'une offre d'achat.
 */
export type BidStatusDtoReadable = {
    /**
     * Identifiant unique du statut
     */
    readonly id?: number;
    /**
     * Nom du statut
     */
    name: string;
};

/**
 * Objet de transfert de données pour le statut d'une offre d'achat.
 */
export type BidStatusDtoWritable = {
    /**
     * Nom du statut
     */
    name: string;
};

/**
 * Identifiants de connexion
 */
export type LoginRequest = {
    username: string;
    password: string;
};

/**
 * Objet de transfert de données pour les administrateurs.
 */
export type AdminListDtoReadable = UserListDtoReadable & {
    type: 'AdminListDto';
};

/**
 * Objet de transfert de données pour les administrateurs.
 */
export type AdminListDtoWritable = UserListDtoWritable & {
    type: 'AdminListDto';
};

/**
 * Objet de transfert de données pour les transporteurs.
 */
export type CarrierListDtoReadable = UserListDtoReadable & {
    type: 'CarrierListDto';
} & {
    /**
     * Prix par kilomètre facturé par le transporteur
     */
    pricePerKm: number;
};

/**
 * Objet de transfert de données pour les transporteurs.
 */
export type CarrierListDtoWritable = UserListDtoWritable & {
    type: 'CarrierListDto';
} & {
    /**
     * Prix par kilomètre facturé par le transporteur
     */
    pricePerKm: number;
};

/**
 * Objet de transfert de données pour les producteurs.
 */
export type ProducerListDtoReadable = TraderListDtoReadable & {
    /**
     * Identifiant agricole
     */
    agriculturalIdentifier: string;
    /**
     * Coopérative du producteur
     */
    cooperative: CooperativeDtoReadable;
};

/**
 * Objet de transfert de données pour les producteurs.
 */
export type ProducerListDtoWritable = TraderListDtoWritable & {
    /**
     * Identifiant agricole
     */
    agriculturalIdentifier: string;
    /**
     * Coopérative du producteur
     */
    cooperative: CooperativeDtoWritable;
};

/**
 * Objet de transfert de données pour les inspecteurs qualité.
 */
export type QualityInspectorListDtoReadable = UserListDtoReadable & {
    type: 'QualityInspectorListDto';
};

/**
 * Objet de transfert de données pour les inspecteurs qualité.
 */
export type QualityInspectorListDtoWritable = UserListDtoWritable & {
    type: 'QualityInspectorListDto';
};

/**
 * Objet de transfert de données pour les traders.
 */
export type TraderListDtoReadable = UserListDtoReadable & {
    type: 'TraderListDto';
};

/**
 * Objet de transfert de données pour les traders.
 */
export type TraderListDtoWritable = UserListDtoWritable & {
    type: 'TraderListDto';
};

/**
 * Objet de transfert de données pour les transformateurs.
 */
export type TransformerListDtoReadable = TraderListDtoReadable;

/**
 * Objet de transfert de données pour les transformateurs.
 */
export type TransformerListDtoWritable = TraderListDtoWritable;

/**
 * Data Transfer Object pour un utilisateur
 */
export type UserListDtoReadable = {
    /**
     * Identifiant de l'utilisateur
     */
    readonly id?: number;
    /**
     * Prénom de l'utilisateur
     */
    firstName: string;
    /**
     * Nom de famille de l'utilisateur
     */
    lastName: string;
    /**
     * Adresse email de l'utilisateur
     */
    email: string;
    /**
     * Date d'enregistrement
     */
    readonly registrationDate?: string;
    /**
     * Date de validation
     */
    readonly validationDate?: string;
    /**
     * Compte activé
     */
    enabled?: boolean;
    /**
     * Adresse postale de l'utilisateur
     */
    address?: string;
    /**
     * Numéro de téléphone (Bénin, ancien et nouveau formats)
     */
    phone?: string;
    /**
     * Type d'utilisateur. Valeurs possibles: admin, producer, transformer, quality_inspector, exporter, carrier
     */
    type: 'admin' | 'producer' | 'transformer' | 'quality_inspector' | 'exporter' | 'carrier';
};

/**
 * Data Transfer Object pour un utilisateur
 */
export type UserListDtoWritable = {
    /**
     * Prénom de l'utilisateur
     */
    firstName: string;
    /**
     * Nom de famille de l'utilisateur
     */
    lastName: string;
    /**
     * Adresse email de l'utilisateur
     */
    email: string;
    /**
     * Compte activé
     */
    enabled?: boolean;
    /**
     * Adresse postale de l'utilisateur
     */
    address?: string;
    /**
     * Numéro de téléphone (Bénin, ancien et nouveau formats)
     */
    phone?: string;
    /**
     * Mot de passe de l'utilisateur
     */
    password?: string;
    /**
     * Type d'utilisateur. Valeurs possibles: admin, producer, transformer, quality_inspector, exporter, carrier
     */
    type: 'admin' | 'producer' | 'transformer' | 'quality_inspector' | 'exporter' | 'carrier';
};

export type DeleteFieldData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/users/{userId}/fields/{id}';
};

export type DeleteFieldErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type DeleteFieldError = DeleteFieldErrors[keyof DeleteFieldErrors];

export type DeleteFieldResponses = {
    /**
     * Deleted successfully
     */
    204: void;
};

export type DeleteFieldResponse = DeleteFieldResponses[keyof DeleteFieldResponses];

export type GetFieldData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/users/{userId}/fields/{id}';
};

export type GetFieldErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type GetFieldError = GetFieldErrors[keyof GetFieldErrors];

export type GetFieldResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateFieldData = {
    body: FieldDtoWritable;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/users/{userId}/fields/{id}';
};

export type UpdateFieldErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type UpdateFieldError = UpdateFieldErrors[keyof UpdateFieldErrors];

export type UpdateFieldResponses = {
    /**
     * Updated successfully
     */
    200: unknown;
};

export type DeleteUserData = {
    body?: never;
    path: {
        /**
         * Identifiant de l'utilisateur
         */
        id: number;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type DeleteUserErrors = {
    /**
     * Utilisateur non trouvé
     */
    404: ApiErrorResponse;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
    /**
     * Utilisateur supprimé avec succès
     */
    204: void;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type GetUserData = {
    body?: never;
    path: {
        /**
         * Identifiant de l'utilisateur
         */
        id: number;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type GetUserErrors = {
    /**
     * Utilisateur non trouvé
     */
    404: ApiErrorResponse;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
    /**
     * Utilisateur trouvé
     */
    200: UserDetailDtoReadable;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type UpdateUserData = {
    body: AdminDetailDtoWritable | CarrierDetailDtoWritable | QualityInspectorDetailDtoWritable | TraderDetailDtoWritable | ExporterDetailDtoWritable | ProducerDetailDtoWritable | TransformerDetailDtoWritable;
    path: {
        /**
         * Identifiant de l'utilisateur
         */
        id: number;
    };
    query?: never;
    url: '/api/users/{id}';
};

export type UpdateUserErrors = {
    /**
     * Erreur de validation ou JSON invalide
     */
    400: ApiErrorResponse;
    /**
     * Utilisateur non trouvé
     */
    404: ApiErrorResponse;
};

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors];

export type UpdateUserResponses = {
    /**
     * Utilisateur mis à jour avec succès
     */
    200: UserDetailDtoReadable;
};

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses];

export type UpdateUserRolesData = {
    body: Array<string>;
    path: {
        /**
         * Identifiant de l'utilisateur
         */
        id: number;
    };
    query?: never;
    url: '/api/users/{id}/roles';
};

export type UpdateUserRolesErrors = {
    /**
     * Erreur de validation ou JSON invalide
     */
    400: ApiErrorResponse;
    /**
     * Utilisateur ou rôle non trouvé
     */
    404: ApiErrorResponse;
};

export type UpdateUserRolesError = UpdateUserRolesErrors[keyof UpdateUserRolesErrors];

export type UpdateUserRolesResponses = {
    /**
     * Rôles mis à jour avec succès
     */
    200: UserDetailDtoReadable;
};

export type UpdateUserRolesResponse = UpdateUserRolesResponses[keyof UpdateUserRolesResponses];

export type DeleteStoreData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/stores/{id}';
};

export type DeleteStoreErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type DeleteStoreError = DeleteStoreErrors[keyof DeleteStoreErrors];

export type DeleteStoreResponses = {
    /**
     * Deleted successfully
     */
    204: void;
};

export type DeleteStoreResponse = DeleteStoreResponses[keyof DeleteStoreResponses];

export type GetStoreData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/stores/{id}';
};

export type GetStoreErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type GetStoreError = GetStoreErrors[keyof GetStoreErrors];

export type GetStoreResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateStoreData = {
    body: StoreDetailDtoWritable;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/stores/{id}';
};

export type UpdateStoreErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type UpdateStoreError = UpdateStoreErrors[keyof UpdateStoreErrors];

export type UpdateStoreResponses = {
    /**
     * Updated successfully
     */
    200: unknown;
};

export type AddCarrierData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        carrierId: number;
        /**
         * Identifiant de la ressource
         */
        regionId: number;
    };
    query?: never;
    url: '/api/regions/{regionId}/carriers/{carrierId}';
};

export type AddCarrierErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
};

export type AddCarrierError = AddCarrierErrors[keyof AddCarrierErrors];

export type AddCarrierResponses = {
    /**
     * OK
     */
    200: unknown;
    /**
     * Created
     */
    201: unknown;
};

export type DeleteRegionData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/regions/{id}';
};

export type DeleteRegionErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type DeleteRegionError = DeleteRegionErrors[keyof DeleteRegionErrors];

export type DeleteRegionResponses = {
    /**
     * Deleted successfully
     */
    204: void;
};

export type DeleteRegionResponse = DeleteRegionResponses[keyof DeleteRegionResponses];

export type GetRegionData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/regions/{id}';
};

export type GetRegionErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type GetRegionError = GetRegionErrors[keyof GetRegionErrors];

export type GetRegionResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateRegionData = {
    body: RegionDtoWritable;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/regions/{id}';
};

export type UpdateRegionErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type UpdateRegionError = UpdateRegionErrors[keyof UpdateRegionErrors];

export type UpdateRegionResponses = {
    /**
     * Updated successfully
     */
    200: unknown;
};

export type DeleteQualityData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/qualities/{id}';
};

export type DeleteQualityErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type DeleteQualityError = DeleteQualityErrors[keyof DeleteQualityErrors];

export type DeleteQualityResponses = {
    /**
     * Deleted successfully
     */
    204: void;
};

export type DeleteQualityResponse = DeleteQualityResponses[keyof DeleteQualityResponses];

export type GetQualityData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/qualities/{id}';
};

export type GetQualityErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type GetQualityError = GetQualityErrors[keyof GetQualityErrors];

export type GetQualityResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateQualityData = {
    body: QualityDtoWritable;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/qualities/{id}';
};

export type UpdateQualityErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type UpdateQualityError = UpdateQualityErrors[keyof UpdateQualityErrors];

export type UpdateQualityResponses = {
    /**
     * Updated successfully
     */
    200: unknown;
};

export type DeleteProductData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/products/{id}';
};

export type DeleteProductErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type DeleteProductError = DeleteProductErrors[keyof DeleteProductErrors];

export type DeleteProductResponses = {
    /**
     * Deleted successfully
     */
    204: void;
};

export type DeleteProductResponse = DeleteProductResponses[keyof DeleteProductResponses];

export type GetProductData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/products/{id}';
};

export type GetProductErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type GetProductError = GetProductErrors[keyof GetProductErrors];

export type GetProductResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateProductData = {
    body: HarvestProductDtoWritable | TransformedProductDtoWritable;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/products/{id}';
};

export type UpdateProductErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type UpdateProductError = UpdateProductErrors[keyof UpdateProductErrors];

export type UpdateProductResponses = {
    /**
     * Updated successfully
     */
    200: unknown;
};

export type DeleteLanguageData = {
    body?: never;
    path: {
        /**
         * Identifiant de la langue
         */
        id: number;
    };
    query?: never;
    url: '/api/languages/{id}';
};

export type DeleteLanguageErrors = {
    /**
     * Langue non trouvée
     */
    404: ApiErrorResponse;
};

export type DeleteLanguageError = DeleteLanguageErrors[keyof DeleteLanguageErrors];

export type DeleteLanguageResponses = {
    /**
     * Langue supprimée avec succès
     */
    204: void;
};

export type DeleteLanguageResponse = DeleteLanguageResponses[keyof DeleteLanguageResponses];

export type GetLanguageData = {
    body?: never;
    path: {
        /**
         * Identifiant de la langue
         */
        id: number;
    };
    query?: never;
    url: '/api/languages/{id}';
};

export type GetLanguageErrors = {
    /**
     * Langue non trouvée
     */
    404: ApiErrorResponse;
};

export type GetLanguageError = GetLanguageErrors[keyof GetLanguageErrors];

export type GetLanguageResponses = {
    /**
     * Langue trouvée
     */
    200: LanguageDtoReadable;
};

export type GetLanguageResponse = GetLanguageResponses[keyof GetLanguageResponses];

export type UpdateLanguageData = {
    body: LanguageDtoWritable;
    path: {
        /**
         * Identifiant de la langue
         */
        id: number;
    };
    query?: never;
    url: '/api/languages/{id}';
};

export type UpdateLanguageErrors = {
    /**
     * Erreur de validation ou JSON invalide
     */
    400: ApiErrorResponse;
    /**
     * Langue non trouvée
     */
    404: ApiErrorResponse;
};

export type UpdateLanguageError = UpdateLanguageErrors[keyof UpdateLanguageErrors];

export type UpdateLanguageResponses = {
    /**
     * Langue mise à jour avec succès
     */
    200: LanguageDtoReadable;
};

export type UpdateLanguageResponse = UpdateLanguageResponses[keyof UpdateLanguageResponses];

export type DeleteDocumentData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/documents/{id}';
};

export type DeleteDocumentErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type DeleteDocumentError = DeleteDocumentErrors[keyof DeleteDocumentErrors];

export type DeleteDocumentResponses = {
    /**
     * Deleted successfully
     */
    204: void;
};

export type DeleteDocumentResponse = DeleteDocumentResponses[keyof DeleteDocumentResponses];

export type GetDocumentData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/documents/{id}';
};

export type GetDocumentErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type GetDocumentError = GetDocumentErrors[keyof GetDocumentErrors];

export type GetDocumentResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateDocumentData = {
    body: DocumentDtoWritable;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/documents/{id}';
};

export type UpdateDocumentErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type UpdateDocumentError = UpdateDocumentErrors[keyof UpdateDocumentErrors];

export type UpdateDocumentResponses = {
    /**
     * Updated successfully
     */
    200: unknown;
};

export type DeleteCooperativeData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/cooperatives/{id}';
};

export type DeleteCooperativeErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type DeleteCooperativeError = DeleteCooperativeErrors[keyof DeleteCooperativeErrors];

export type DeleteCooperativeResponses = {
    /**
     * Deleted successfully
     */
    204: void;
};

export type DeleteCooperativeResponse = DeleteCooperativeResponses[keyof DeleteCooperativeResponses];

export type GetCooperativeData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/cooperatives/{id}';
};

export type GetCooperativeErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type GetCooperativeError = GetCooperativeErrors[keyof GetCooperativeErrors];

export type GetCooperativeResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateCooperativeData = {
    body: CooperativeDtoWritable;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/cooperatives/{id}';
};

export type UpdateCooperativeErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type UpdateCooperativeError = UpdateCooperativeErrors[keyof UpdateCooperativeErrors];

export type UpdateCooperativeResponses = {
    /**
     * Updated successfully
     */
    200: unknown;
};

export type DeleteContractOfferData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/contracts/{id}';
};

export type DeleteContractOfferErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type DeleteContractOfferError = DeleteContractOfferErrors[keyof DeleteContractOfferErrors];

export type DeleteContractOfferResponses = {
    /**
     * Deleted successfully
     */
    204: void;
};

export type DeleteContractOfferResponse = DeleteContractOfferResponses[keyof DeleteContractOfferResponses];

export type GetContractOfferData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/contracts/{id}';
};

export type GetContractOfferErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type GetContractOfferError = GetContractOfferErrors[keyof GetContractOfferErrors];

export type GetContractOfferResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateContractOfferData = {
    body: ContractOfferDtoWritable;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/contracts/{id}';
};

export type UpdateContractOfferErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type UpdateContractOfferError = UpdateContractOfferErrors[keyof UpdateContractOfferErrors];

export type UpdateContractOfferResponses = {
    /**
     * Updated successfully
     */
    200: unknown;
};

export type DeleteAuctionData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/auctions/{id}';
};

export type DeleteAuctionErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type DeleteAuctionError = DeleteAuctionErrors[keyof DeleteAuctionErrors];

export type DeleteAuctionResponses = {
    /**
     * Deleted successfully
     */
    204: void;
};

export type DeleteAuctionResponse = DeleteAuctionResponses[keyof DeleteAuctionResponses];

export type GetAuctionData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/auctions/{id}';
};

export type GetAuctionErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type GetAuctionError = GetAuctionErrors[keyof GetAuctionErrors];

export type GetAuctionResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateAuctionData = {
    body: AuctionDtoWritable;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/auctions/{id}';
};

export type UpdateAuctionErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type UpdateAuctionError = UpdateAuctionErrors[keyof UpdateAuctionErrors];

export type UpdateAuctionResponses = {
    /**
     * Updated successfully
     */
    200: unknown;
};

export type DeleteBidData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        bidId: number;
    };
    query?: never;
    url: '/api/auctions/{auctionId}/bids/{bidId}';
};

export type DeleteBidErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type DeleteBidError = DeleteBidErrors[keyof DeleteBidErrors];

export type DeleteBidResponses = {
    /**
     * Deleted successfully
     */
    204: void;
};

export type DeleteBidResponse = DeleteBidResponses[keyof DeleteBidResponses];

export type GetBidData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        bidId: number;
    };
    query?: never;
    url: '/api/auctions/{auctionId}/bids/{bidId}';
};

export type GetBidErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type GetBidError = GetBidErrors[keyof GetBidErrors];

export type GetBidResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateBidData = {
    body: BidDtoWritable;
    path: {
        /**
         * Identifiant de la ressource
         */
        bidId: number;
    };
    query?: never;
    url: '/api/auctions/{auctionId}/bids/{bidId}';
};

export type UpdateBidErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type UpdateBidError = UpdateBidErrors[keyof UpdateBidErrors];

export type UpdateBidResponses = {
    /**
     * Updated successfully
     */
    200: unknown;
};

export type DeleteAuctionStrategyData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/auctions/strategies/{id}';
};

export type DeleteAuctionStrategyErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type DeleteAuctionStrategyError = DeleteAuctionStrategyErrors[keyof DeleteAuctionStrategyErrors];

export type DeleteAuctionStrategyResponses = {
    /**
     * Deleted successfully
     */
    204: void;
};

export type DeleteAuctionStrategyResponse = DeleteAuctionStrategyResponses[keyof DeleteAuctionStrategyResponses];

export type GetAuctionStrategyData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/auctions/strategies/{id}';
};

export type GetAuctionStrategyErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type GetAuctionStrategyError = GetAuctionStrategyErrors[keyof GetAuctionStrategyErrors];

export type GetAuctionStrategyResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type UpdateAuctionStrategyData = {
    body: AuctionStrategyDtoWritable;
    path: {
        /**
         * Identifiant de la ressource
         */
        id: number;
    };
    query?: never;
    url: '/api/auctions/strategies/{id}';
};

export type UpdateAuctionStrategyErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type UpdateAuctionStrategyError = UpdateAuctionStrategyErrors[keyof UpdateAuctionStrategyErrors];

export type UpdateAuctionStrategyResponses = {
    /**
     * Updated successfully
     */
    200: unknown;
};

export type ListUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type ListUsersResponses = {
    /**
     * Liste récupérée avec succès
     */
    200: Array<AdminDetailDtoReadable | AdminListDtoReadable | CarrierDetailDtoReadable | CarrierListDtoReadable | ExporterDetailDtoReadable | ProducerDetailDtoReadable | QualityInspectorDetailDtoReadable | QualityInspectorListDtoReadable | TraderListDtoReadable | TransformerDetailDtoReadable | ProducerListDtoReadable | TransformerListDtoReadable>;
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type CreateUserData = {
    body: AdminDetailDtoWritable | CarrierDetailDtoWritable | QualityInspectorDetailDtoWritable | TraderDetailDtoWritable | ExporterDetailDtoWritable | ProducerDetailDtoWritable | TransformerDetailDtoWritable;
    path?: never;
    query?: never;
    url: '/api/users';
};

export type CreateUserErrors = {
    /**
     * Erreur de validation ou JSON invalide
     */
    400: ApiErrorResponse;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * Utilisateur créé avec succès
     */
    201: UserDetailDtoReadable;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type ListFieldsData = {
    body?: never;
    path: {
        userId: number;
    };
    query?: never;
    url: '/api/users/{userId}/fields';
};

export type ListFieldsErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type ListFieldsError = ListFieldsErrors[keyof ListFieldsErrors];

export type ListFieldsResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type CreateFieldData = {
    body: FieldDtoWritable;
    path?: never;
    query?: never;
    url: '/api/users/{userId}/fields';
};

export type CreateFieldErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
};

export type CreateFieldError = CreateFieldErrors[keyof CreateFieldErrors];

export type CreateFieldResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type AddRoleToUserData = {
    body?: never;
    path: {
        /**
         * Identifiant de l'utilisateur
         */
        id: number;
        /**
         * Nom du rôle
         */
        roleName: string;
    };
    query?: never;
    url: '/api/users/{id}/roles/{roleName}';
};

export type AddRoleToUserErrors = {
    /**
     * Erreur de validation ou JSON invalide
     */
    400: ApiErrorResponse;
    /**
     * Utilisateur ou rôle non trouvé
     */
    404: ApiErrorResponse;
};

export type AddRoleToUserError = AddRoleToUserErrors[keyof AddRoleToUserErrors];

export type AddRoleToUserResponses = {
    /**
     * Rôle ajouté avec succès
     */
    200: UserDetailDtoReadable;
};

export type AddRoleToUserResponse = AddRoleToUserResponses[keyof AddRoleToUserResponses];

export type ListStoresData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/stores';
};

export type ListStoresErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type ListStoresError = ListStoresErrors[keyof ListStoresErrors];

export type ListStoresResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type CreateStoreData = {
    body: StoreDetailDtoWritable;
    path?: never;
    query?: never;
    url: '/api/stores';
};

export type CreateStoreErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
};

export type CreateStoreError = CreateStoreErrors[keyof CreateStoreErrors];

export type CreateStoreResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type ListRegionsData = {
    body?: never;
    path?: never;
    query?: {
        carrierId?: number;
    };
    url: '/api/regions';
};

export type ListRegionsErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type ListRegionsError = ListRegionsErrors[keyof ListRegionsErrors];

export type ListRegionsResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type CreateRegionData = {
    body: RegionDtoWritable;
    path?: never;
    query?: never;
    url: '/api/regions';
};

export type CreateRegionErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
};

export type CreateRegionError = CreateRegionErrors[keyof CreateRegionErrors];

export type CreateRegionResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type ListQualitiesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/qualities';
};

export type ListQualitiesErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type ListQualitiesError = ListQualitiesErrors[keyof ListQualitiesErrors];

export type ListQualitiesResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type CreateQualityData = {
    body: QualityDtoWritable;
    path?: never;
    query?: never;
    url: '/api/qualities';
};

export type CreateQualityErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
};

export type CreateQualityError = CreateQualityErrors[keyof CreateQualityErrors];

export type CreateQualityResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type ListProductsData = {
    body?: never;
    path?: never;
    query?: {
        /**
         * ID du propriétaire des produits
         */
        traderId?: number;
    };
    url: '/api/products';
};

export type ListProductsErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type ListProductsError = ListProductsErrors[keyof ListProductsErrors];

export type ListProductsResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type CreateProductData = {
    body: HarvestProductDtoWritable | TransformedProductDtoWritable;
    path?: never;
    query?: never;
    url: '/api/products';
};

export type CreateProductErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
};

export type CreateProductError = CreateProductErrors[keyof CreateProductErrors];

export type CreateProductResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type ListLanguagesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/languages';
};

export type ListLanguagesResponses = {
    /**
     * Liste récupérée avec succès
     */
    200: Array<LanguageDtoReadable>;
};

export type ListLanguagesResponse = ListLanguagesResponses[keyof ListLanguagesResponses];

export type CreateLanguageData = {
    body: LanguageDtoWritable;
    path?: never;
    query?: never;
    url: '/api/languages';
};

export type CreateLanguageErrors = {
    /**
     * Erreur de validation ou JSON invalide
     */
    400: ApiErrorResponse;
};

export type CreateLanguageError = CreateLanguageErrors[keyof CreateLanguageErrors];

export type CreateLanguageResponses = {
    /**
     * Langue créée avec succès
     */
    201: LanguageDtoReadable;
};

export type CreateLanguageResponse = CreateLanguageResponses[keyof CreateLanguageResponses];

export type CreateDocumentData = {
    body: DocumentDtoWritable;
    path?: never;
    query?: never;
    url: '/api/documents';
};

export type CreateDocumentErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
};

export type CreateDocumentError = CreateDocumentErrors[keyof CreateDocumentErrors];

export type CreateDocumentResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type ListCooperativesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/cooperatives';
};

export type ListCooperativesErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type ListCooperativesError = ListCooperativesErrors[keyof ListCooperativesErrors];

export type ListCooperativesResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type CreateCooperativeData = {
    body: CooperativeDtoWritable;
    path?: never;
    query?: never;
    url: '/api/cooperatives';
};

export type CreateCooperativeErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
};

export type CreateCooperativeError = CreateCooperativeErrors[keyof CreateCooperativeErrors];

export type CreateCooperativeResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type ListContractOffersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/contracts';
};

export type ListContractOffersErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type ListContractOffersError = ListContractOffersErrors[keyof ListContractOffersErrors];

export type ListContractOffersResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type CreateContractOfferData = {
    body: ContractOfferDtoWritable;
    path?: never;
    query?: never;
    url: '/api/contracts';
};

export type CreateContractOfferErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
};

export type CreateContractOfferError = CreateContractOfferErrors[keyof CreateContractOfferErrors];

export type CreateContractOfferResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type LogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/signout';
};

export type LogoutResponses = {
    /**
     * Utilisateur déconnecté avec succès
     */
    200: unknown;
};

export type AuthenticateUserData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/api/auth/signin';
};

export type AuthenticateUserErrors = {
    /**
     * Requête mal formée (loginRequest invalide)
     */
    400: ApiErrorResponse;
    /**
     * Échec de l'authentification
     */
    401: ApiErrorResponse;
};

export type AuthenticateUserError = AuthenticateUserErrors[keyof AuthenticateUserErrors];

export type AuthenticateUserResponses = {
    /**
     * Utilisateur authentifié avec succès
     */
    200: UserDetailDtoReadable;
};

export type AuthenticateUserResponse = AuthenticateUserResponses[keyof AuthenticateUserResponses];

export type ListAuctionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auctions';
};

export type ListAuctionsResponses = {
    /**
     * Liste des enchères
     */
    200: Array<AuctionDtoReadable>;
};

export type ListAuctionsResponse = ListAuctionsResponses[keyof ListAuctionsResponses];

export type CreateAuctionData = {
    body: AuctionDtoWritable;
    path?: never;
    query?: never;
    url: '/api/auctions';
};

export type CreateAuctionErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
};

export type CreateAuctionError = CreateAuctionErrors[keyof CreateAuctionErrors];

export type CreateAuctionResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type ListBidsData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        auctionId: number;
    };
    query?: never;
    url: '/api/auctions/{auctionId}/bids/';
};

export type ListBidsErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type ListBidsError = ListBidsErrors[keyof ListBidsErrors];

export type ListBidsResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type CreateBidData = {
    body: BidDtoWritable;
    path?: never;
    query?: never;
    url: '/api/auctions/{auctionId}/bids/';
};

export type CreateBidErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
};

export type CreateBidError = CreateBidErrors[keyof CreateBidErrors];

export type CreateBidResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type ListAuctionStrategiesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auctions/strategies';
};

export type ListAuctionStrategiesErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type ListAuctionStrategiesError = ListAuctionStrategiesErrors[keyof ListAuctionStrategiesErrors];

export type ListAuctionStrategiesResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type CreateAuctionStrategyData = {
    body: AuctionStrategyDtoWritable;
    path?: never;
    query?: never;
    url: '/api/auctions/strategies';
};

export type CreateAuctionStrategyErrors = {
    /**
     * Bad Request
     */
    400: ApiError;
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
};

export type CreateAuctionStrategyError = CreateAuctionStrategyErrors[keyof CreateAuctionStrategyErrors];

export type CreateAuctionStrategyResponses = {
    /**
     * Created
     */
    201: unknown;
};

export type ListDocumentsByUserData = {
    body?: never;
    path: {
        /**
         * Identifiant de la ressource
         */
        userId: number;
    };
    query?: never;
    url: '/api/documents/users/{userId}';
};

export type ListDocumentsByUserErrors = {
    /**
     * Unauthorized
     */
    401: ApiError;
    /**
     * Forbidden
     */
    403: ApiError;
    /**
     * Not Found
     */
    404: ApiError;
};

export type ListDocumentsByUserError = ListDocumentsByUserErrors[keyof ListDocumentsByUserErrors];

export type ListDocumentsByUserResponses = {
    /**
     * Success
     */
    200: unknown;
};

export type GetCurrentUserData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/auth/me';
};

export type GetCurrentUserErrors = {
    /**
     * Utilisateur non authentifié
     */
    401: ApiErrorResponse;
};

export type GetCurrentUserError = GetCurrentUserErrors[keyof GetCurrentUserErrors];

export type GetCurrentUserResponses = {
    /**
     * Utilisateur authentifié
     */
    200: UserDetailDtoReadable;
};

export type GetCurrentUserResponse = GetCurrentUserResponses[keyof GetCurrentUserResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:8080' | (string & {});
};