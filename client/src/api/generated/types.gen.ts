// This file is auto-generated by @hey-api/openapi-ts

/**
 * DTO pour l'entité Adresse.
 */
export type AddressUpdateDto = {
  /**
   * Rue/Quartier/Numéro
   */
  street?: string
  /**
   * Coordonnées géographiques du store (au format GeoJSON, WKT ou équivalent)
   */
  location?: string
  /**
   * Id de la ville
   */
  cityId?: number
  /**
   * Id de la région
   */
  regionId?: number
}

/**
 * Objet de transfert de données pour les administrateurs.
 */
export type AdminUpdateDto = UserUpdateDto & {
  type: 'admin'
}

/**
 * Objet de transfert de données pour les transporteurs.
 */
export type CarrierUpdateDto = UserUpdateDto & {
  type: 'carrier'
} & {
  /**
   * Prix par kilomètre facturé par le transporteur
   */
  pricePerKm: number
  /**
   * Rayon d'action du transporteur en kilomètres
   */
  radius: number
}

/**
 * Objet de transfert de données pour les exportateurs.
 */
export type ExporterUpdateDto = UserUpdateDto & {
  type: 'exporter'
}

/**
 * Objet de transfert de données pour les producteurs.
 */
export type ProducerUpdateDto = UserUpdateDto & {
  type: 'producer'
} & {
  /**
   * Identifiant agricole
   */
  agriculturalIdentifier: string
  /**
   * Coopérative du producteur
   */
  cooperativeId?: number
}

/**
 * Objet de transfert de données pour les inspecteurs qualité.
 */
export type QualityInspectorUpdateDto = UserUpdateDto & {
  type: 'quality_inspector'
}

/**
 * Objet de transfert de données pour les traders.
 */
export type TraderUpdateDto = UserUpdateDto & {
  type: 'trader'
}

/**
 * Objet de transfert de données pour les transformateurs.
 */
export type TransformerUpdateDto = UserUpdateDto & {
  type: 'transformer'
}

/**
 * Objet de transfert pour créer ou mettre à jour un utilisateur.
 */
export type UserUpdateDto = {
  /**
   * Prénom de l'utilisateur
   */
  firstName?: string
  /**
   * Nom de famille de l'utilisateur
   */
  lastName?: string
  /**
   * Adresse email de l'utilisateur
   */
  email?: string
  /**
   * Compte activé
   */
  enabled?: boolean
  /**
   * Numéro de téléphone (Bénin, format local à 10 chiffres débutant par 01, ou +229...)
   */
  phone?: string
  /**
   * Mot de passe de l'utilisateur
   */
  password?: string
  /**
   * Identifiant de la langue préférée
   */
  languageId?: number
  /**
   * Adresse de l'utilisateur
   */
  address?: AddressUpdateDto
  type: string
}

/**
 * DTO pour l'entité Adresse.
 */
export type AddressDto = {
  /**
   * Rue/Quartier/Numéro
   */
  street?: string
  /**
   * Coordonnées géographiques du store (au format GeoJSON, WKT ou équivalent)
   */
  location: string
  /**
   * Id de la ville
   */
  cityId: number
  /**
   * Id de la région
   */
  regionId?: number
}

/**
 * Objet de transfert de données pour les administrateurs.
 */
export type AdminDetailDto = UserDetailDto & {
  type: 'admin'
}

/**
 * Objet de transfert de données pour les transporteurs.
 */
export type CarrierDetailDto = UserDetailDto & {
  type: 'carrier'
} & {
  /**
   * Prix par kilomètre facturé par le transporteur
   */
  pricePerKm: number
  /**
   * Rayon d'action du transporteur en kilomètres
   */
  radius: number
}

/**
 * Représente une coopérative.
 */
export type CooperativeDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Nom de la coopérative
   */
  name: string
  /**
   * Date de création
   */
  creationDate: string
  /**
   * Président de la coopérative
   */
  presidentId: number
}

/**
 * Objet de transfert de données pour les entités Document.
 */
export type DocumentDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * MIME type du document
   */
  contentType: string
  /**
   * Nom original du fichier
   */
  originalFilename: string
  /**
   * Taille du fichier en octets
   */
  size: number
  /**
   * Extension du fichier
   */
  extension: string
  /**
   * Chemin de stockage du document
   */
  storagePath: string
  /**
   * Date et heure de l'envoi du document
   */
  readonly uploadDate?: string
  /**
   * Identifiant de l'utilisateur associé au document
   */
  userId: number
}

/**
 * Objet de transfert de données pour les exportateurs.
 */
export type ExporterDetailDto = TraderDetailDto

/**
 * Objet de transfert de données pour une langue.
 */
export type LanguageDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Code de la langue
   */
  code: string
  /**
   * Nom de la langue
   */
  name: string
}

/**
 * Objet de transfert de données pour les producteurs.
 */
export type ProducerDetailDto = TraderDetailDto & {
  /**
   * Identifiant agricole
   */
  agriculturalIdentifier: string
  /**
   * Coopérative du producteur
   */
  cooperative?: CooperativeDto
}

/**
 * Objet de transfert de données pour les inspecteurs qualité.
 */
export type QualityInspectorDetailDto = UserDetailDto & {
  type: 'quality_inspector'
}

/**
 * Objet de transfert de données pour les traders.
 */
export type TraderDetailDto = UserDetailDto & {
  type: 'trader'
}

/**
 * Objet de transfert de données pour les transformateurs.
 */
export type TransformerDetailDto = TraderDetailDto

/**
 * Type d'utilisateur. Valeurs possibles: admin, producer, transformer, quality_inspector, exporter, carrier
 */
export enum Type {
  ADMIN = 'admin',
  PRODUCER = 'producer',
  TRANSFORMER = 'transformer',
  QUALITY_INSPECTOR = 'quality_inspector',
  EXPORTER = 'exporter',
  CARRIER = 'carrier',
  TRADER = 'trader',
}

/**
 * Data Transfer Object pour un utilisateur
 */
export type UserDetailDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Prénom de l'utilisateur
   */
  firstName: string
  /**
   * Nom de famille de l'utilisateur
   */
  lastName: string
  /**
   * Adresse email de l'utilisateur
   */
  email: string
  /**
   * Date d'enregistrement
   */
  readonly registrationDate?: string
  /**
   * Date de validation
   */
  readonly validationDate?: string
  /**
   * Compte activé
   */
  enabled?: boolean
  /**
   * Numéro de téléphone (Bénin, format local à 10 chiffres débutant par 01, ou +229...)
   */
  phone?: string
  /**
   * Identifiant de la langue préférée
   */
  language: LanguageDto
  /**
   * Adresse de l'utilisateur
   */
  address: AddressDto
  /**
   * Détails complets d’un utilisateur
   */
  documents?: Array<DocumentDto>
  storeAssociated?: boolean
  /**
   * Type d'utilisateur. Valeurs possibles: admin, producer, transformer, quality_inspector, exporter, carrier
   */
  type:
    | 'admin'
    | 'producer'
    | 'transformer'
    | 'quality_inspector'
    | 'exporter'
    | 'carrier'
    | 'trader'
}

/**
 * Réponse d'erreur standardisée
 */
export type ApiErrorResponse = {
  /**
   * Code HTTP de la réponse
   */
  status: number
  /**
   * Horodatage de l'erreur
   */
  timestamp: string
  /**
   * Chemin de la requête ayant provoqué l'erreur
   */
  path: string
  /**
   * Code global d'erreur
   */
  code: string
  /**
   * Liste des erreurs détaillées
   */
  errors: Array<ErrorDetail>
}

/**
 * Détail d'une erreur individuelle
 */
export type ErrorDetail = {
  /**
   * Nom du champ en erreur (absent pour erreurs globales)
   */
  field?: string
  /**
   * Code d'erreur détaillé
   */
  code: string
  /**
   * Message décrivant l'erreur
   */
  message: string
}

/**
 * Écriture d'un magasin (store)
 */
export type StoreUpdateDto = {
  /**
   * Nom du store
   */
  name: string
  /**
   * Identifiant de l'utilisateur lié au store
   */
  userId: number
  /**
   * Adresse de l'utilisateur
   */
  address: AddressUpdateDto
}

/**
 * Objet de transfert de données pour une région.
 */
export type RegionDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Nom de la région
   */
  name: string
}

/**
 * Objet de transfert pour créer ou mettre à jour un contrôle qualité.
 */
export type QualityControlUpdateDto = {
  /**
   * Identifiant du contrôle qualité
   */
  identifier: string
  /**
   * Date de contrôle qualité
   */
  controlDate: string
  /**
   * Granularité mesurée
   */
  granularity: number
  /**
   * Résultat du test KOR
   */
  korTest: number
  /**
   * Taux d'humidité mesuré
   */
  humidity: number
  /**
   * Inspecteur qualité associé
   */
  qualityInspectorId: number
  /**
   * Qualité associée
   */
  qualityId: number
}

/**
 * Objet de transfert de données pour le contrôle qualité.
 */
export type QualityControlDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Identifiant du contrôle qualité
   */
  identifier: string
  /**
   * Date de contrôle qualité
   */
  controlDate: string
  /**
   * Granularité mesurée
   */
  granularity: number
  /**
   * Résultat du test KOR
   */
  korTest: number
  /**
   * Taux d'humidité mesuré
   */
  humidity: number
  /**
   * Inspecteur qualité associé
   */
  qualityInspector: UserMiniDto
  /**
   * Qualité associée
   */
  quality: QualityDto
  /**
   * Documents associés au contrôle qualité
   */
  documents?: Array<DocumentDto>
}

/**
 * Représente une qualité de produit.
 */
export type QualityDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Nom de la qualité
   */
  name: string
  /**
   * Identifiant du type de qualité
   */
  qualityType: QualityTypeDto
}

/**
 * Représente un type de qualité de produit.
 */
export type QualityTypeDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Nom du type de qualité
   */
  name: string
}

/**
 * Données minimales d'un utilisateur.
 */
export type UserMiniDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Prénom de l'utilisateur
   */
  firstName: string
  /**
   * Nom de famille de l'utilisateur
   */
  lastName: string
}

/**
 * Écriture d'une qualité
 */
export type QualityUpdateDto = {
  /**
   * Nom de la qualité
   */
  name: string
  /**
   * Identifiant du type de qualité
   */
  qualityTypeId: number
}

/**
 * Objet de transfert de données pour les produits récoltés.
 */
export type HarvestProductUpdateDto = ProductUpdateDto & {
  type: 'harvest'
} & {
  /**
   * Producteur associé au produit récolté
   */
  producerId: number
  /**
   * Champ associé au produit récolté
   */
  fieldId: number
  /**
   * Produits transformé correspondant
   */
  transformedProductId?: number
}

/**
 * Objet de transfert pour créer ou mettre à jour un produit.
 */
export type ProductUpdateDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  deliveryDate?: string
  /**
   * Magasin associé au produit
   */
  storeId: number
  /**
   * Poids en kg du produit
   */
  weightKg?: number
  /**
   * Poids en kg du produit disponible à la vente
   */
  weightKgAvailable?: number
  /**
   * Contrôle qualité associé au produit
   */
  qualityControlId: number
  type: string
}

/**
 * Objet de transfert de données pour les produits transformés.
 */
export type TransformedProductUpdateDto = ProductUpdateDto & {
  type: 'transformed'
} & {
  /**
   * Identifiant du produit transformé
   */
  identifier: string
  /**
   * Transformateur associé
   */
  transformerId: number
  /**
   * Produits bruts d'origine
   */
  harvestProductIds?: Array<number>
}

/**
 * Objet de transfert de données pour les champs.
 */
export type FieldDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Identifiant du champ (code unique)
   */
  identifier?: string
  /**
   * Adresse du champ
   */
  address: AddressDto
  /**
   * Producteur associé au champ.
   */
  producer?: ProducerDetailDto
}

/**
 * Objet de transfert de données pour les produits récoltés.
 */
export type HarvestProductDto = ProductDto & {
  type: 'harvest'
} & {
  /**
   * Producteur associé au produit récolté
   */
  producer: ProducerDetailDto
  /**
   * Champ associé au produit récolté
   */
  field: FieldDto
}

/**
 * Data Transfer Object pour un produit
 */
export type ProductDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  deliveryDate?: string
  /**
   * Magasin associé au produit
   */
  store: StoreDetailDto
  /**
   * Poids en kg du produit
   */
  weightKg: number
  /**
   * Poids en kg du produit disponible à la vente
   */
  weightKgAvailable: number
  /**
   * Contrôle qualité associé au produit
   */
  qualityControl: QualityControlDto
  /**
   * Type de produit.
   */
  type: 'harvest' | 'transformed'
}

/**
 * Objet de transfert de données pour un entrepôt (store).
 */
export type StoreDetailDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Nom du store
   */
  name: string
  /**
   * Identifiant de l'utilisateur lié au store
   */
  userId: number
  /**
   * Adresse de l'utilisateur
   */
  address: AddressDto
}

/**
 * Objet de transfert de données pour les produits transformés.
 */
export type TransformedProductDto = ProductDto & {
  type: 'transformed'
} & {
  /**
   * Identifiant du produit transformé
   */
  identifier: string
  /**
   * Transformateur associé
   */
  transformer: TransformerDetailDto
  /**
   * Produits bruts d'origine
   */
  harvestProducts?: Array<HarvestProductDto>
}

/**
 * Objet de transfert de données pour la mise à jour d'un article de presse.
 */
export type NewsUpdateDto = {
  /**
   * Nouveau titre de l'article
   */
  title?: string
  /**
   * Nouveau contenu de l'article
   */
  content?: string
  /**
   * Nouvelle date de publication de l'article
   */
  publicationDate?: string
  /**
   * ID de la nouvelle catégorie associée à l'article
   */
  categoryId?: number
  /**
   * Nom du nouvel auteur de l'article
   */
  authorName?: string
}

/**
 * Objet de transfert de données pour les catégories de news.
 */
export type NewsCategoryDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Nom de la catégorie
   */
  name: string
  /**
   * Description de la catégorie
   */
  description?: string
}

/**
 * Objet de transfert pour créer ou mettre à jour un field.
 */
export type FieldUpdateDto = {
  /**
   * Identifiant du champ (code unique)
   */
  identifier?: string
  /**
   * Adresse du champ
   */
  address: AddressUpdateDto
  /**
   * Producteur associé au champ.
   */
  producerId: number
}

/**
 * Objet de transfert pour créer ou mettre à jour une coopérative.
 */
export type CooperativeUpdateDto = {
  /**
   * Nom de la coopérative
   */
  name: string
  /**
   * Date de création
   */
  creationDate?: string
  /**
   * Président de la coopérative
   */
  presidentId: number
}

/**
 * Objet de transfert pour créer ou mettre à jour une enchère.
 */
export type ContractOfferUpdateDto = {
  /**
   * Statut de l'offre de contrat
   */
  status: string
  /**
   * Prix par kilogramme proposé
   */
  pricePerKg: number
  /**
   * Date de création de l'offre
   */
  readonly creationDate: string
  /**
   * Date de terminaison de l'offre
   */
  endDate: string
  /**
   * Vendeur associé à l'offre
   */
  sellerId: number
  /**
   * Acheteur associé à l'offre
   */
  buyerId: number
  /**
   * Qualité associée à l'offre
   */
  qualityId: number
}

/**
 * Objet de transfert de données pour les offres de contrat.
 */
export type ContractOfferDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Statut de l'offre de contrat
   */
  status: string
  /**
   * Prix par kilogramme proposé
   */
  pricePerKg: number
  /**
   * Date de création de l'offre
   */
  readonly creationDate: string
  /**
   * Date de terminaison de l'offre
   */
  endDate: string
  /**
   * Vendeur associé à l'offre
   */
  seller: UserMiniDto
  /**
   * Acheteur associé à l'offre
   */
  buyer: UserMiniDto
  /**
   * Qualité associée à l'offre
   */
  quality: QualityDto
}

/**
 * Objet de transfert pour créer ou mettre à jour une offres.
 */
export type BidUpdateDto = {
  /**
   * Montant de l'offre
   */
  amount: number
  /**
   * Date de création de l'offre
   */
  readonly creationDate?: string
  /**
   * Identifiant de l'enchère associée à l'offre
   */
  auctionId: number
  /**
   * Trader ayant passé l'offre
   */
  traderId: number
  /**
   * Statut de l'offre
   */
  statusId?: number
}

/**
 * Objet de transfert de données pour les offres d'achat (Bid).
 */
export type BidDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Montant de l'offre
   */
  amount: number
  /**
   * Date de création de l'offre
   */
  readonly creationDate: string
  /**
   * Identifiant de l'enchère associée à l'offre
   */
  auctionId: number
  /**
   * Trader ayant passé l'offre
   */
  trader: UserMiniDto
  /**
   * Statut de l'offre
   */
  status: TradeStatusDto
}

/**
 * Objet de transfert de données pour le statut d'une offre d'achat.
 */
export type TradeStatusDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Nom du statut
   */
  name: string
}

/**
 * Mise à jour des options d'enchère
 */
export type AuctionOptionsUpdateDto = {
  /**
   * ID de la stratégie
   */
  strategyId?: number
  /**
   * Prix fixe au kg
   */
  fixedPriceKg?: number
  /**
   * Prix max au kg
   */
  maxPriceKg?: number
  /**
   * Prix min au kg
   */
  minPriceKg?: number
  /**
   * Prix d'achat immédiat
   */
  buyNowPrice?: number
  /**
   * Afficher au public
   */
  showPublic?: boolean
  /**
   * Forcer les meilleures enchères
   */
  forceBetterBids?: boolean
  /**
   * Incrément minimum d'une sur enchère
   */
  minIncrement?: number
}

/**
 * Objet de transfert pour créer ou mettre à jour une enchère.
 */
export type AuctionUpdateDto = {
  /**
   * Prix de l'enchère
   */
  price: number
  /**
   * Quantité de produit associée à l'enchère
   */
  productQuantity: number
  /**
   * Date d'expiration de l'enchère
   */
  expirationDate: string
  /**
   * Statut actif de l'enchère
   */
  active: boolean
  /**
   * Produit associé à l'enchère
   */
  productId: number
  /**
   * Trader ayant créé l'enchère
   */
  traderId: number
  /**
   * Statut de l'enchère
   */
  statusId?: number
  /**
   * Options d'enchère
   */
  options?: AuctionOptionsUpdateDto
}

/**
 * Objet de transfert de données pour les enchères.
 */
export type AuctionDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Prix de l'enchère
   */
  price: number
  /**
   * Quantité de produit associée à l'enchère
   */
  productQuantity: number
  /**
   * Date d'expiration de l'enchère
   */
  expirationDate: string
  /**
   * Date de création de l'enchère
   */
  readonly creationDate: string
  /**
   * Statut actif de l'enchère
   */
  active: boolean
  /**
   * Produit associé à l'enchère
   */
  product: HarvestProductDto | TransformedProductDto
  /**
   * Trader ayant créé l'enchère
   */
  trader: UserMiniDto
  /**
   * Statut de l'enchère
   */
  status: TradeStatusDto
  /**
   * Liste des offres posées sur l'enchère
   */
  bids: Array<BidDto>
  /**
   * Options spécifiques à l'enchère
   */
  options?: AuctionOptionsDto
}

/**
 * Options spécifiques à une enchère
 */
export type AuctionOptionsDto = {
  /**
   * Stratégie de l'enchère
   */
  strategy?: AuctionStrategyDto
  /**
   * Prix fixe au kg
   */
  fixedPriceKg?: number
  /**
   * Prix max au kg
   */
  maxPriceKg?: number
  /**
   * Prix min au kg
   */
  minPriceKg?: number
  /**
   * Prix d'achat immédiat
   */
  buyNowPrice?: number
  /**
   * Afficher au public
   */
  showPublic?: boolean
  /**
   * Forcer les meilleures enchères
   */
  forceBetterBids?: boolean
  /**
   * Incrément minimum d'une sur enchère
   */
  minIncrement?: number
}

/**
 * Objet de transfert de données pour les stratégies d'enchère.
 */
export type AuctionStrategyDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Nom de la stratégie d'enchère
   */
  name: string
}

/**
 * Mise à jour des réglages globaux
 */
export type GlobalSettingsUpdateDto = {
  /**
   * ID de la stratégie par défaut
   */
  defaultStrategyId?: number
  /**
   * Prix fixe au kg par défaut
   */
  defaultFixedPriceKg?: number
  /**
   * Prix max au kg par défaut
   */
  defaultMaxPriceKg?: number
  /**
   * Prix min au kg par défaut
   */
  defaultMinPriceKg?: number
  /**
   * Filtrer les enchères terminées
   */
  showOnlyActive: boolean
  /**
   * Forcer de faire des sur enchères meilleures que la précédente
   */
  forceBetterBids: boolean
  /**
   * Incrément minimum d'une unité sur enchère
   */
  minIncrement?: number
}

/**
 * Réglages globaux du système d'enchères
 */
export type GlobalSettingsDto = {
  /**
   * Stratégie par défaut
   */
  defaultStrategy?: AuctionStrategyDto
  /**
   * Prix fixe au kg par défaut
   */
  defaultFixedPriceKg?: number
  /**
   * Prix max au kg par défaut
   */
  defaultMaxPriceKg?: number
  /**
   * Prix min au kg par défaut
   */
  defaultMinPriceKg?: number
  /**
   * Filtrer automatiquement les enchères terminées
   */
  showOnlyActive?: boolean
  /**
   * Forcer de faire des sur enchères meilleures que la précédente
   */
  forceBetterBids: boolean
  /**
   * Incrément minimum d'une sur enchère
   */
  minIncrement?: number
}

/**
 * Objet de transfert de données pour les administrateurs.
 */
export type AdminCreateDto = UserCreateDto & {
  type: 'admin'
}

/**
 * Objet de transfert de données pour les transporteurs.
 */
export type CarrierCreateDto = UserCreateDto & {
  type: 'carrier'
} & {
  /**
   * Prix par kilomètre facturé par le transporteur
   */
  pricePerKm: number
  /**
   * Rayon d'action du transporteur en kilomètres
   */
  radius: number
}

/**
 * Objet de transfert de données pour les exportateurs.
 */
export type ExporterCreateDto = UserCreateDto & {
  type: 'exporter'
}

/**
 * Objet de transfert de données pour les producteurs.
 */
export type ProducerCreateDto = UserCreateDto & {
  type: 'producer'
} & {
  /**
   * Identifiant agricole
   */
  agriculturalIdentifier: string
  /**
   * Coopérative du producteur
   */
  cooperativeId?: number
}

/**
 * Objet de transfert de données pour les inspecteurs qualité.
 */
export type QualityInspectorCreateDto = UserCreateDto & {
  type: 'quality_inspector'
}

/**
 * Objet de transfert de données pour les traders.
 */
export type TraderCreateDto = UserCreateDto & {
  type: 'trader'
}

/**
 * Objet de transfert de données pour les transformateurs.
 */
export type TransformerCreateDto = UserCreateDto & {
  type: 'transformer'
}

/**
 * Objet de transfert pour créer ou mettre à jour un utilisateur.
 */
export type UserCreateDto = {
  /**
   * Prénom de l'utilisateur
   */
  firstName: string
  /**
   * Nom de famille de l'utilisateur
   */
  lastName: string
  /**
   * Adresse email de l'utilisateur
   */
  email: string
  /**
   * Date d'enregistrement
   */
  readonly registrationDate?: string
  /**
   * Date de validation
   */
  readonly validationDate?: string
  /**
   * Compte activé
   */
  enabled?: boolean
  /**
   * Numéro de téléphone (Bénin, format local à 10 chiffres débutant par 01, ou +229...)
   */
  phone: string
  /**
   * Mot de passe de l'utilisateur
   */
  password: string
  /**
   * Identifiant de la langue préférée
   */
  languageId: number
  /**
   * Adresse de l'utilisateur
   */
  address: AddressDto
  type: string
}

/**
 * Objet de transfert de données pour la mise à jour d'un article de presse.
 */
export type NewsCreateDto = {
  /**
   * Nouveau titre de l'article
   */
  title: string
  /**
   * Nouveau contenu de l'article
   */
  content: string
  /**
   * Nouvelle date de publication de l'article
   */
  publicationDate?: string
  /**
   * ID de la nouvelle catégorie associée à l'article
   */
  categoryId: number
  /**
   * Nom du nouvel auteur de l'article
   */
  authorName?: string
}

/**
 * Payload du message de contact
 */
export type ContactRequestDto = {
  /**
   * Nom du contact
   */
  name: string
  /**
   * Adresse email du contact
   */
  email: string
  /**
   * Message du contact
   */
  message: string
}

/**
 * Identifiants de connexion
 */
export type LoginRequest = {
  username: string
  password: string
}

/**
 * Objet de transfert de données pour les administrateurs.
 */
export type AdminListDto = UserListDto & {
  type: 'admin'
}

/**
 * Objet de transfert de données pour les transporteurs.
 */
export type CarrierListDto = UserListDto & {
  type: 'carrier'
} & {
  /**
   * Prix par kilomètre facturé par le transporteur
   */
  pricePerKm: number
  /**
   * Rayon d'action du transporteur en kilomètres
   */
  radius: number
}

/**
 * Objet de transfert de données pour les exportateurs.
 */
export type ExporterListDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Prénom de l'utilisateur
   */
  firstName: string
  /**
   * Nom de famille de l'utilisateur
   */
  lastName: string
  /**
   * Adresse email de l'utilisateur
   */
  email: string
  /**
   * Date d'enregistrement
   */
  readonly registrationDate?: string
  /**
   * Date de validation
   */
  readonly validationDate?: string
  /**
   * Compte activé
   */
  enabled?: boolean
  /**
   * Numéro de téléphone (Bénin, format local à 10 chiffres débutant par 01, ou +229...)
   */
  phone?: string
  /**
   * Identifiant de la langue préférée
   */
  language: LanguageDto
  /**
   * Adresse de l'utilisateur
   */
  address: AddressDto
  /**
   * Détails complets d’un utilisateur
   */
  documents?: Array<DocumentDto>
  storeAssociated?: boolean
  /**
   * Type d'utilisateur. Valeurs possibles: admin, producer, transformer, quality_inspector, exporter, carrier
   */
  type:
    | 'admin'
    | 'producer'
    | 'transformer'
    | 'quality_inspector'
    | 'exporter'
    | 'carrier'
    | 'trader'
}

/**
 * Objet de transfert de données pour les producteurs.
 */
export type ProducerListDto = TraderListDto & {
  /**
   * Identifiant agricole
   */
  agriculturalIdentifier: string
  /**
   * Coopérative du producteur
   */
  cooperativeId: number
}

/**
 * Objet de transfert de données pour les inspecteurs qualité.
 */
export type QualityInspectorListDto = UserListDto & {
  type: 'quality_inspector'
}

/**
 * Objet de transfert de données pour les traders.
 */
export type TraderListDto = UserListDto & {
  type: 'trader'
}

/**
 * Objet de transfert de données pour les transformateurs.
 */
export type TransformerListDto = TraderListDto

/**
 * Data Transfer Object pour un utilisateur
 */
export type UserListDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Prénom de l'utilisateur
   */
  firstName: string
  /**
   * Nom de famille de l'utilisateur
   */
  lastName: string
  /**
   * Adresse email de l'utilisateur
   */
  email: string
  /**
   * Date d'enregistrement
   */
  readonly registrationDate?: string
  /**
   * Date de validation
   */
  readonly validationDate?: string
  /**
   * Compte activé
   */
  enabled?: boolean
  /**
   * Numéro de téléphone (Bénin, format local à 10 chiffres débutant par 01, ou +229...)
   */
  phone?: string
  /**
   * Type d'utilisateur. Valeurs possibles: admin, producer, transformer, quality_inspector, exporter, carrier
   */
  type:
    | 'admin'
    | 'producer'
    | 'transformer'
    | 'quality_inspector'
    | 'exporter'
    | 'carrier'
    | 'trader'
}

export type SseEmitter = {
  timeout?: number
}

/**
 * Objet de transfert de données pour les articles de presse.
 */
export type NewsDto = {
  /**
   * Identifiant unique
   */
  readonly id: number
  /**
   * Titre de l'article
   */
  title: string
  /**
   * Contenu de l'article
   */
  content?: string
  /**
   * Date de création de l'article
   */
  readonly creationDate?: string
  /**
   * Date de publication de l'article
   */
  publicationDate: string
  /**
   * Catégorie associée à l'article
   */
  category: NewsCategoryDto
  /**
   * Nom de l'auteur de l'article
   */
  authorName?: string
}

/**
 * Représente une liste paginée d'articles d'actualité.
 */
export type NewsPageDto = {
  /**
   * Le contenu de cette page.
   */
  content?: Array<NewsDto>
  /**
   * Le nombre total de pages.
   */
  totalPages?: number
  /**
   * Le nombre total d'éléments sur toutes les pages.
   */
  totalElements?: number
  /**
   * Le numéro de la page courante (commence à zéro).
   */
  number?: number
  /**
   * Le nombre d'éléments dans la page courante.
   */
  size?: number
  /**
   * Indique s'il s'agit de la première page.
   */
  first?: boolean
  /**
   * Indique s'il s'agit de la dernière page.
   */
  last?: boolean
  /**
   * Le nombre d'éléments dans la page courante.
   */
  numberOfElements?: number
  /**
   * Indique si la page courante est vide.
   */
  empty?: boolean
}

/**
 * Données nécessaires pour l'application cliente.
 */
export type ApplicationDataDto = {
  /**
   * Liste des stratégies d'enchères disponibles.
   */
  languages: Array<LanguageDto>
}

export type DashboardGraphicDto = {
  date?: string
  totalOpenAuctions?: number
  totalNewAuctions?: number
}

export type DashboardCardsDto = {
  totalNbUsers?: number
  totalNbUsersTendency?: number
  pendingValidation?: number
  pendingValidationTendency?: number
  totalAuctions?: number
  totalAuctionsTendency?: number
  auctionsConcluded?: number
  auctionsConcludedTendency?: number
  totalLotWeightKg?: number
  totalLotWeightKgTendency?: number
  totalSoldWeightKg?: number
  totalSoldWeightKgTendency?: number
  totalSalesAmount?: number
  totalSalesAmountTendency?: number
  monthlySalesAmount?: number
  monthlySalesAmountTendency?: number
  grade1Price?: number
  grade1PriceTendency?: number
  grade2Price?: number
  grade2PriceTendency?: number
  grade3Price?: number
  grade3PriceTendency?: number
  horsCategoryPrice?: number
  horsCategoryTendency?: number
  transformedPrice?: number
  transformedPriceTendency?: number
}

export type ApiError = {
  /**
   * human-readable error message
   */
  message?: string
  errors?: Array<ApiErrorErrors>
}

export type ApiErrorErrors = {
  /**
   * For input validation errors, identifies where in the  JSON request body the error occurred.
   */
  path?: string
  /**
   * Human-readable error message.
   */
  message?: string
  /**
   * Code indicating error type.
   */
  errorCode?: string
}

export type DeleteUserData = {
  body?: never
  path: {
    /**
     * Identifiant de l'utilisateur
     */
    id: number
  }
  query?: never
  url: '/api/users/{id}'
}

export type DeleteUserErrors = {
  /**
   * Utilisateur non trouvé
   */
  404: ApiErrorResponse
}

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors]

export type DeleteUserResponses = {
  /**
   * Utilisateur supprimé avec succès
   */
  204: void
}

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses]

export type UpdateUserData = {
  body:
    | AdminUpdateDto
    | CarrierUpdateDto
    | ExporterUpdateDto
    | ProducerUpdateDto
    | QualityInspectorUpdateDto
    | TraderUpdateDto
    | TransformerUpdateDto
  path: {
    /**
     * Identifiant de l'utilisateur
     */
    id: number
  }
  query?: never
  url: '/api/users/{id}'
}

export type UpdateUserErrors = {
  /**
   * Erreur de validation ou JSON invalide
   */
  400: ApiErrorResponse
  /**
   * Utilisateur non trouvé
   */
  404: ApiErrorResponse
}

export type UpdateUserError = UpdateUserErrors[keyof UpdateUserErrors]

export type UpdateUserResponses = {
  /**
   * Utilisateur mis à jour avec succès
   */
  200: UserDetailDto
}

export type UpdateUserResponse = UpdateUserResponses[keyof UpdateUserResponses]

export type DeleteStoreData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/stores/{id}'
}

export type DeleteStoreErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type DeleteStoreError = DeleteStoreErrors[keyof DeleteStoreErrors]

export type DeleteStoreResponses = {
  /**
   * OK
   */
  200: unknown
  /**
   * No Content
   */
  204: void
}

export type DeleteStoreResponse =
  DeleteStoreResponses[keyof DeleteStoreResponses]

export type GetStoreData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/stores/{id}'
}

export type GetStoreErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type GetStoreError = GetStoreErrors[keyof GetStoreErrors]

export type GetStoreResponses = {
  /**
   * OK
   */
  200: StoreDetailDto
}

export type GetStoreResponse = GetStoreResponses[keyof GetStoreResponses]

export type UpdateStoreData = {
  body: StoreUpdateDto
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/stores/{id}'
}

export type UpdateStoreErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type UpdateStoreError = UpdateStoreErrors[keyof UpdateStoreErrors]

export type UpdateStoreResponses = {
  /**
   * Created
   */
  201: StoreUpdateDto
}

export type UpdateStoreResponse =
  UpdateStoreResponses[keyof UpdateStoreResponses]

export type DeleteRegionData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/regions/{id}'
}

export type DeleteRegionErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type DeleteRegionError = DeleteRegionErrors[keyof DeleteRegionErrors]

export type DeleteRegionResponses = {
  /**
   * OK
   */
  200: unknown
  /**
   * No Content
   */
  204: void
}

export type DeleteRegionResponse =
  DeleteRegionResponses[keyof DeleteRegionResponses]

export type GetRegionData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/regions/{id}'
}

export type GetRegionErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type GetRegionError = GetRegionErrors[keyof GetRegionErrors]

export type GetRegionResponses = {
  /**
   * OK
   */
  200: RegionDto
}

export type GetRegionResponse = GetRegionResponses[keyof GetRegionResponses]

export type UpdateRegionData = {
  body: RegionDto
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/regions/{id}'
}

export type UpdateRegionErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type UpdateRegionError = UpdateRegionErrors[keyof UpdateRegionErrors]

export type UpdateRegionResponses = {
  /**
   * Created
   */
  201: RegionDto
}

export type UpdateRegionResponse =
  UpdateRegionResponses[keyof UpdateRegionResponses]

export type DeleteQualityControlData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/quality-controls/{id}'
}

export type DeleteQualityControlErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type DeleteQualityControlError =
  DeleteQualityControlErrors[keyof DeleteQualityControlErrors]

export type DeleteQualityControlResponses = {
  /**
   * OK
   */
  200: unknown
  /**
   * No Content
   */
  204: void
}

export type DeleteQualityControlResponse =
  DeleteQualityControlResponses[keyof DeleteQualityControlResponses]

export type GetQualityControlData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/quality-controls/{id}'
}

export type GetQualityControlErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type GetQualityControlError =
  GetQualityControlErrors[keyof GetQualityControlErrors]

export type GetQualityControlResponses = {
  /**
   * OK
   */
  200: QualityControlDto
}

export type GetQualityControlResponse =
  GetQualityControlResponses[keyof GetQualityControlResponses]

export type UpdateQualityControlData = {
  body: QualityControlUpdateDto
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/quality-controls/{id}'
}

export type UpdateQualityControlErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type UpdateQualityControlError =
  UpdateQualityControlErrors[keyof UpdateQualityControlErrors]

export type UpdateQualityControlResponses = {
  /**
   * Created
   */
  201: QualityControlDto
}

export type UpdateQualityControlResponse =
  UpdateQualityControlResponses[keyof UpdateQualityControlResponses]

export type DeleteQualityData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/qualities/{id}'
}

export type DeleteQualityErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type DeleteQualityError = DeleteQualityErrors[keyof DeleteQualityErrors]

export type DeleteQualityResponses = {
  /**
   * OK
   */
  200: unknown
  /**
   * No Content
   */
  204: void
}

export type DeleteQualityResponse =
  DeleteQualityResponses[keyof DeleteQualityResponses]

export type GetQualityData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/qualities/{id}'
}

export type GetQualityErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type GetQualityError = GetQualityErrors[keyof GetQualityErrors]

export type GetQualityResponses = {
  /**
   * OK
   */
  200: QualityDto
}

export type GetQualityResponse = GetQualityResponses[keyof GetQualityResponses]

export type UpdateQualityData = {
  body: QualityUpdateDto
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/qualities/{id}'
}

export type UpdateQualityErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type UpdateQualityError = UpdateQualityErrors[keyof UpdateQualityErrors]

export type UpdateQualityResponses = {
  /**
   * Created
   */
  201: QualityDto
}

export type UpdateQualityResponse =
  UpdateQualityResponses[keyof UpdateQualityResponses]

export type DeleteProductData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/products/{id}'
}

export type DeleteProductErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type DeleteProductError = DeleteProductErrors[keyof DeleteProductErrors]

export type DeleteProductResponses = {
  /**
   * OK
   */
  200: unknown
  /**
   * No Content
   */
  204: void
}

export type DeleteProductResponse =
  DeleteProductResponses[keyof DeleteProductResponses]

export type GetProductData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/products/{id}'
}

export type GetProductErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type GetProductError = GetProductErrors[keyof GetProductErrors]

export type GetProductResponses = {
  /**
   * OK
   */
  200: ProductDto
}

export type GetProductResponse = GetProductResponses[keyof GetProductResponses]

export type UpdateProductData = {
  body: HarvestProductUpdateDto | TransformedProductUpdateDto
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/products/{id}'
}

export type UpdateProductErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type UpdateProductError = UpdateProductErrors[keyof UpdateProductErrors]

export type UpdateProductResponses = {
  /**
   * Created
   */
  201: ProductDto
}

export type UpdateProductResponse =
  UpdateProductResponses[keyof UpdateProductResponses]

export type DeleteNewsData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/news/{id}'
}

export type DeleteNewsErrors = {
  /**
   * Article de nouvelles non trouvé
   */
  404: ApiErrorResponse
}

export type DeleteNewsError = DeleteNewsErrors[keyof DeleteNewsErrors]

export type DeleteNewsResponses = {
  /**
   * Article de nouvelles supprimé avec succès
   */
  204: void
}

export type DeleteNewsResponse = DeleteNewsResponses[keyof DeleteNewsResponses]

export type GetNewsData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/news/{id}'
}

export type GetNewsErrors = {
  /**
   * Article de nouvelles non trouvé
   */
  404: ApiErrorResponse
}

export type GetNewsError = GetNewsErrors[keyof GetNewsErrors]

export type GetNewsResponses = {
  /**
   * Opération réussie
   */
  200: NewsDto
}

export type GetNewsResponse = GetNewsResponses[keyof GetNewsResponses]

export type UpdateNewsData = {
  body: NewsUpdateDto
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/news/{id}'
}

export type UpdateNewsErrors = {
  /**
   * Entrée invalide
   */
  400: ApiErrorResponse
  /**
   * Article de nouvelles non trouvé
   */
  404: ApiErrorResponse
}

export type UpdateNewsError = UpdateNewsErrors[keyof UpdateNewsErrors]

export type UpdateNewsResponses = {
  /**
   * Article de nouvelles mis à jour
   */
  200: NewsUpdateDto
}

export type UpdateNewsResponse = UpdateNewsResponses[keyof UpdateNewsResponses]

export type DeleteNewsCategoryData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/news-categories/{id}'
}

export type DeleteNewsCategoryErrors = {
  /**
   * Catégorie non trouvée
   */
  404: ApiErrorResponse
  /**
   * La catégorie ne peut pas être supprimée (par exemple, en cours d'utilisation)
   */
  409: ApiErrorResponse
}

export type DeleteNewsCategoryError =
  DeleteNewsCategoryErrors[keyof DeleteNewsCategoryErrors]

export type DeleteNewsCategoryResponses = {
  /**
   * Catégorie d'articles de nouvelles supprimée avec succès
   */
  204: void
}

export type DeleteNewsCategoryResponse =
  DeleteNewsCategoryResponses[keyof DeleteNewsCategoryResponses]

export type GetNewsCategoryData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/news-categories/{id}'
}

export type GetNewsCategoryErrors = {
  /**
   * Catégorie non trouvée
   */
  404: ApiErrorResponse
}

export type GetNewsCategoryError =
  GetNewsCategoryErrors[keyof GetNewsCategoryErrors]

export type GetNewsCategoryResponses = {
  /**
   * Opération réussie
   */
  200: NewsCategoryDto
}

export type GetNewsCategoryResponse =
  GetNewsCategoryResponses[keyof GetNewsCategoryResponses]

export type UpdateNewsCategoryData = {
  body: NewsCategoryDto
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/news-categories/{id}'
}

export type UpdateNewsCategoryErrors = {
  /**
   * Entrée invalide
   */
  400: ApiErrorResponse
  /**
   * Catégorie non trouvée
   */
  404: ApiErrorResponse
  /**
   * Le nom de la catégorie existe déjà
   */
  409: ApiErrorResponse
}

export type UpdateNewsCategoryError =
  UpdateNewsCategoryErrors[keyof UpdateNewsCategoryErrors]

export type UpdateNewsCategoryResponses = {
  /**
   * Catégorie d'articles de nouvelles mise à jour
   */
  200: NewsCategoryDto
}

export type UpdateNewsCategoryResponse =
  UpdateNewsCategoryResponses[keyof UpdateNewsCategoryResponses]

export type DeleteLanguageData = {
  body?: never
  path: {
    /**
     * Identifiant de la langue
     */
    id: number
  }
  query?: never
  url: '/api/languages/{id}'
}

export type DeleteLanguageErrors = {
  /**
   * Langue non trouvée
   */
  404: ApiErrorResponse
}

export type DeleteLanguageError =
  DeleteLanguageErrors[keyof DeleteLanguageErrors]

export type DeleteLanguageResponses = {
  /**
   * Langue supprimée avec succès
   */
  204: void
}

export type DeleteLanguageResponse =
  DeleteLanguageResponses[keyof DeleteLanguageResponses]

export type GetLanguageData = {
  body?: never
  path: {
    /**
     * Identifiant de la langue
     */
    id: number
  }
  query?: never
  url: '/api/languages/{id}'
}

export type GetLanguageErrors = {
  /**
   * Langue non trouvée
   */
  404: ApiErrorResponse
}

export type GetLanguageError = GetLanguageErrors[keyof GetLanguageErrors]

export type GetLanguageResponses = {
  /**
   * Langue trouvée
   */
  200: LanguageDto
}

export type GetLanguageResponse =
  GetLanguageResponses[keyof GetLanguageResponses]

export type UpdateLanguageData = {
  body: LanguageDto
  path: {
    /**
     * Identifiant de la langue
     */
    id: number
  }
  query?: never
  url: '/api/languages/{id}'
}

export type UpdateLanguageErrors = {
  /**
   * Erreur de validation ou JSON invalide
   */
  400: ApiErrorResponse
  /**
   * Langue non trouvée
   */
  404: ApiErrorResponse
}

export type UpdateLanguageError =
  UpdateLanguageErrors[keyof UpdateLanguageErrors]

export type UpdateLanguageResponses = {
  /**
   * Langue mise à jour avec succès
   */
  200: LanguageDto
}

export type UpdateLanguageResponse =
  UpdateLanguageResponses[keyof UpdateLanguageResponses]

export type DeleteFieldData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/fields/{id}'
}

export type DeleteFieldErrors = {
  /**
   * Unauthorized
   */
  401: ApiError
  /**
   * Forbidden
   */
  403: ApiError
  /**
   * Not Found
   */
  404: ApiError
}

export type DeleteFieldError = DeleteFieldErrors[keyof DeleteFieldErrors]

export type DeleteFieldResponses = {
  /**
   * OK
   */
  200: unknown
  /**
   * Deleted successfully
   */
  204: void
}

export type DeleteFieldResponse =
  DeleteFieldResponses[keyof DeleteFieldResponses]

export type GetFieldData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/fields/{id}'
}

export type GetFieldErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type GetFieldError = GetFieldErrors[keyof GetFieldErrors]

export type GetFieldResponses = {
  /**
   * OK
   */
  200: FieldDto
}

export type GetFieldResponse = GetFieldResponses[keyof GetFieldResponses]

export type UpdateFieldData = {
  body: FieldUpdateDto
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/fields/{id}'
}

export type UpdateFieldErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type UpdateFieldError = UpdateFieldErrors[keyof UpdateFieldErrors]

export type UpdateFieldResponses = {
  /**
   * Created
   */
  201: FieldUpdateDto
}

export type UpdateFieldResponse =
  UpdateFieldResponses[keyof UpdateFieldResponses]

export type DeleteCooperativeData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/cooperatives/{id}'
}

export type DeleteCooperativeErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type DeleteCooperativeError =
  DeleteCooperativeErrors[keyof DeleteCooperativeErrors]

export type DeleteCooperativeResponses = {
  /**
   * OK
   */
  200: unknown
  /**
   * No Content
   */
  204: void
}

export type DeleteCooperativeResponse =
  DeleteCooperativeResponses[keyof DeleteCooperativeResponses]

export type GetCooperativeData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/cooperatives/{id}'
}

export type GetCooperativeErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type GetCooperativeError =
  GetCooperativeErrors[keyof GetCooperativeErrors]

export type GetCooperativeResponses = {
  /**
   * OK
   */
  200: CooperativeDto
}

export type GetCooperativeResponse =
  GetCooperativeResponses[keyof GetCooperativeResponses]

export type UpdateCooperativeData = {
  body: CooperativeUpdateDto
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/cooperatives/{id}'
}

export type UpdateCooperativeErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type UpdateCooperativeError =
  UpdateCooperativeErrors[keyof UpdateCooperativeErrors]

export type UpdateCooperativeResponses = {
  /**
   * Created
   */
  201: CooperativeDto
}

export type UpdateCooperativeResponse =
  UpdateCooperativeResponses[keyof UpdateCooperativeResponses]

export type DeleteContractOfferData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/contracts/{id}'
}

export type DeleteContractOfferErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type DeleteContractOfferError =
  DeleteContractOfferErrors[keyof DeleteContractOfferErrors]

export type DeleteContractOfferResponses = {
  /**
   * OK
   */
  200: unknown
  /**
   * No Content
   */
  204: void
}

export type DeleteContractOfferResponse =
  DeleteContractOfferResponses[keyof DeleteContractOfferResponses]

export type GetContractOfferData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/contracts/{id}'
}

export type GetContractOfferErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type GetContractOfferError =
  GetContractOfferErrors[keyof GetContractOfferErrors]

export type GetContractOfferResponses = {
  /**
   * OK
   */
  200: ContractOfferDto
}

export type GetContractOfferResponse =
  GetContractOfferResponses[keyof GetContractOfferResponses]

export type UpdateContractOfferData = {
  body: ContractOfferUpdateDto
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/contracts/{id}'
}

export type UpdateContractOfferErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type UpdateContractOfferError =
  UpdateContractOfferErrors[keyof UpdateContractOfferErrors]

export type UpdateContractOfferResponses = {
  /**
   * Created
   */
  201: ContractOfferDto
}

export type UpdateContractOfferResponse =
  UpdateContractOfferResponses[keyof UpdateContractOfferResponses]

export type RejectContractOfferData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    contractOfferId: number
  }
  query?: never
  url: '/api/contracts/{contractOfferId}/reject'
}

export type RejectContractOfferErrors = {
  /**
   * Offre de contrat non trouvée
   */
  404: ApiErrorResponse
}

export type RejectContractOfferError =
  RejectContractOfferErrors[keyof RejectContractOfferErrors]

export type RejectContractOfferResponses = {
  /**
   * Offre de contrat rejetée
   */
  200: ContractOfferDto
}

export type RejectContractOfferResponse =
  RejectContractOfferResponses[keyof RejectContractOfferResponses]

export type AcceptContractOfferData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    contractOfferId: number
  }
  query?: never
  url: '/api/contracts/{contractOfferId}/accept'
}

export type AcceptContractOfferErrors = {
  /**
   * Offre de contrat non trouvée
   */
  404: ApiErrorResponse
}

export type AcceptContractOfferError =
  AcceptContractOfferErrors[keyof AcceptContractOfferErrors]

export type AcceptContractOfferResponses = {
  /**
   * Offre de contrat acceptée
   */
  200: ContractOfferDto
}

export type AcceptContractOfferResponse =
  AcceptContractOfferResponses[keyof AcceptContractOfferResponses]

export type DeleteBidData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    bidId: number
  }
  query?: never
  url: '/api/bids/{bidId}'
}

export type DeleteBidErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type DeleteBidError = DeleteBidErrors[keyof DeleteBidErrors]

export type DeleteBidResponses = {
  /**
   * OK
   */
  200: unknown
  /**
   * No Content
   */
  204: void
}

export type DeleteBidResponse = DeleteBidResponses[keyof DeleteBidResponses]

export type GetBidData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    bidId: number
  }
  query?: never
  url: '/api/bids/{bidId}'
}

export type GetBidErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type GetBidError = GetBidErrors[keyof GetBidErrors]

export type GetBidResponses = {
  /**
   * OK
   */
  200: BidDto
}

export type GetBidResponse = GetBidResponses[keyof GetBidResponses]

export type UpdateBidData = {
  body: BidUpdateDto
  path: {
    /**
     * Identifiant de la ressource
     */
    bidId: number
  }
  query?: never
  url: '/api/bids/{bidId}'
}

export type UpdateBidErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type UpdateBidError = UpdateBidErrors[keyof UpdateBidErrors]

export type UpdateBidResponses = {
  /**
   * Created
   */
  201: BidDto
}

export type UpdateBidResponse = UpdateBidResponses[keyof UpdateBidResponses]

export type RejectBidData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    bidId: number
  }
  query?: never
  url: '/api/bids/{bidId}/reject'
}

export type RejectBidErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type RejectBidError = RejectBidErrors[keyof RejectBidErrors]

export type RejectBidResponses = {
  /**
   * OK
   */
  200: BidDto
}

export type RejectBidResponse = RejectBidResponses[keyof RejectBidResponses]

export type AcceptBidData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    bidId: number
  }
  query?: never
  url: '/api/bids/{bidId}/accept'
}

export type AcceptBidErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type AcceptBidError = AcceptBidErrors[keyof AcceptBidErrors]

export type AcceptBidResponses = {
  /**
   * OK
   */
  200: BidDto
}

export type AcceptBidResponse = AcceptBidResponses[keyof AcceptBidResponses]

export type DeleteAuctionData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/auctions/{id}'
}

export type DeleteAuctionErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type DeleteAuctionError = DeleteAuctionErrors[keyof DeleteAuctionErrors]

export type DeleteAuctionResponses = {
  /**
   * OK
   */
  200: unknown
  /**
   * No Content
   */
  204: void
}

export type DeleteAuctionResponse =
  DeleteAuctionResponses[keyof DeleteAuctionResponses]

export type GetAuctionData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/auctions/{id}'
}

export type GetAuctionErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type GetAuctionError = GetAuctionErrors[keyof GetAuctionErrors]

export type GetAuctionResponses = {
  /**
   * OK
   */
  200: AuctionDto
}

export type GetAuctionResponse = GetAuctionResponses[keyof GetAuctionResponses]

export type UpdateAuctionData = {
  body: AuctionUpdateDto
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/auctions/{id}'
}

export type UpdateAuctionErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type UpdateAuctionError = UpdateAuctionErrors[keyof UpdateAuctionErrors]

export type UpdateAuctionResponses = {
  /**
   * Created
   */
  201: AuctionUpdateDto
}

export type UpdateAuctionResponse =
  UpdateAuctionResponses[keyof UpdateAuctionResponses]

export type AcceptAuctionData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/auctions/{id}/accept'
}

export type AcceptAuctionErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type AcceptAuctionError = AcceptAuctionErrors[keyof AcceptAuctionErrors]

export type AcceptAuctionResponses = {
  /**
   * OK
   */
  200: AuctionDto
}

export type AcceptAuctionResponse =
  AcceptAuctionResponses[keyof AcceptAuctionResponses]

export type DeleteAuctionStrategyData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/auctions/strategies/{id}'
}

export type DeleteAuctionStrategyErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type DeleteAuctionStrategyError =
  DeleteAuctionStrategyErrors[keyof DeleteAuctionStrategyErrors]

export type DeleteAuctionStrategyResponses = {
  /**
   * OK
   */
  200: unknown
  /**
   * No Content
   */
  204: void
}

export type DeleteAuctionStrategyResponse =
  DeleteAuctionStrategyResponses[keyof DeleteAuctionStrategyResponses]

export type GetAuctionStrategyData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/auctions/strategies/{id}'
}

export type GetAuctionStrategyErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type GetAuctionStrategyError =
  GetAuctionStrategyErrors[keyof GetAuctionStrategyErrors]

export type GetAuctionStrategyResponses = {
  /**
   * OK
   */
  200: AuctionStrategyDto
}

export type GetAuctionStrategyResponse =
  GetAuctionStrategyResponses[keyof GetAuctionStrategyResponses]

export type UpdateAuctionStrategyData = {
  body: AuctionStrategyDto
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/auctions/strategies/{id}'
}

export type UpdateAuctionStrategyErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type UpdateAuctionStrategyError =
  UpdateAuctionStrategyErrors[keyof UpdateAuctionStrategyErrors]

export type UpdateAuctionStrategyResponses = {
  /**
   * Created
   */
  201: AuctionStrategyDto
}

export type UpdateAuctionStrategyResponse =
  UpdateAuctionStrategyResponses[keyof UpdateAuctionStrategyResponses]

export type GetGlobalSettingsData = {
  body?: never
  path?: never
  query?: never
  url: '/api/admin/global-settings'
}

export type GetGlobalSettingsErrors = {
  /**
   * Réglages globaux non configurés
   */
  404: ApiErrorResponse
}

export type GetGlobalSettingsError =
  GetGlobalSettingsErrors[keyof GetGlobalSettingsErrors]

export type GetGlobalSettingsResponses = {
  /**
   * Réglages globaux récupérés avec succès
   */
  200: GlobalSettingsDto
}

export type GetGlobalSettingsResponse =
  GetGlobalSettingsResponses[keyof GetGlobalSettingsResponses]

export type UpdateGlobalSettingsData = {
  body: GlobalSettingsUpdateDto
  path?: never
  query?: never
  url: '/api/admin/global-settings'
}

export type UpdateGlobalSettingsErrors = {
  /**
   * Données invalides
   */
  400: ApiErrorResponse
}

export type UpdateGlobalSettingsError =
  UpdateGlobalSettingsErrors[keyof UpdateGlobalSettingsErrors]

export type UpdateGlobalSettingsResponses = {
  /**
   * Réglages globaux mis à jour avec succès
   */
  200: GlobalSettingsDto
}

export type UpdateGlobalSettingsResponse =
  UpdateGlobalSettingsResponses[keyof UpdateGlobalSettingsResponses]

/**
 * Type d'utilisateur
 */
export enum UserType {
  ADMIN = 'admin',
  PRODUCER = 'producer',
  TRANSFORMER = 'transformer',
  QUALITY_INSPECTOR = 'quality_inspector',
  EXPORTER = 'exporter',
  CARRIER = 'carrier',
  TRADER = 'trader',
}

export type ListUsersData = {
  body?: never
  path?: never
  query?: {
    /**
     * Type d'utilisateur
     */
    userType?:
      | 'admin'
      | 'producer'
      | 'transformer'
      | 'quality_inspector'
      | 'exporter'
      | 'carrier'
      | 'trader'
  }
  url: '/api/users'
}

export type ListUsersResponses = {
  /**
   * Liste récupérée avec succès
   */
  200: Array<UserListDto>
}

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses]

export type CreateUserData = {
  body: {
    user?: UserCreateDto
    documents?: Array<Blob | File>
  }
  path?: never
  query?: never
  url: '/api/users'
}

export type CreateUserErrors = {
  /**
   * Erreur de validation ou JSON invalide
   */
  400: ApiErrorResponse
  /**
   * Conflit avec un utilisateur existant
   */
  409: ApiErrorResponse
}

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors]

export type CreateUserResponses = {
  /**
   * Utilisateur créé avec succès
   */
  201: UserDetailDto
}

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses]

export type ListStoresData = {
  body?: never
  path?: never
  query?: never
  url: '/api/stores'
}

export type ListStoresResponses = {
  /**
   * Liste récupérée avec succès
   */
  200: Array<StoreDetailDto>
}

export type ListStoresResponse = ListStoresResponses[keyof ListStoresResponses]

export type CreateStoreData = {
  body: StoreUpdateDto
  path?: never
  query?: never
  url: '/api/stores'
}

export type CreateStoreErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type CreateStoreError = CreateStoreErrors[keyof CreateStoreErrors]

export type CreateStoreResponses = {
  /**
   * Created
   */
  201: StoreUpdateDto
}

export type CreateStoreResponse =
  CreateStoreResponses[keyof CreateStoreResponses]

export type ListQualityControlsData = {
  body?: never
  path?: never
  query?: never
  url: '/api/quality-controls'
}

export type ListQualityControlsResponses = {
  /**
   * Liste récupérée avec succès
   */
  200: Array<QualityControlDto>
}

export type ListQualityControlsResponse =
  ListQualityControlsResponses[keyof ListQualityControlsResponses]

export type CreateQualityControlData = {
  body: {
    qualityControl?: QualityControlUpdateDto
    documents?: Array<Blob | File>
  }
  path?: never
  query?: never
  url: '/api/quality-controls'
}

export type CreateQualityControlErrors = {
  /**
   * Erreur de validation ou JSON invalide
   */
  400: ApiErrorResponse
  /**
   * Conflit avec un utilisateur existant
   */
  409: ApiErrorResponse
}

export type CreateQualityControlError =
  CreateQualityControlErrors[keyof CreateQualityControlErrors]

export type CreateQualityControlResponses = {
  /**
   * Contrôle qualité créé avec succès
   */
  201: QualityControlDto
}

export type CreateQualityControlResponse =
  CreateQualityControlResponses[keyof CreateQualityControlResponses]

export type ListQualitiesData = {
  body?: never
  path?: never
  query?: never
  url: '/api/qualities'
}

export type ListQualitiesResponses = {
  /**
   * Liste récupérée avec succès
   */
  200: Array<QualityDto>
}

export type ListQualitiesResponse =
  ListQualitiesResponses[keyof ListQualitiesResponses]

export type CreateQualityData = {
  body: QualityUpdateDto
  path?: never
  query?: never
  url: '/api/qualities'
}

export type CreateQualityErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type CreateQualityError = CreateQualityErrors[keyof CreateQualityErrors]

export type CreateQualityResponses = {
  /**
   * Created
   */
  201: QualityDto
}

export type CreateQualityResponse =
  CreateQualityResponses[keyof CreateQualityResponses]

/**
 * Type du produit
 */
export enum ProductType {
  HARVEST = 'harvest',
  TRANSFORMED = 'transformed',
}

export type ListProductsData = {
  body?: never
  path?: never
  query?: {
    /**
     * ID du propriétaire des produits
     */
    traderId?: number
    /**
     * Type du produit
     */
    productType?: 'harvest' | 'transformed'
  }
  url: '/api/products'
}

export type ListProductsResponses = {
  /**
   * Liste récupérée avec succès
   */
  200: Array<ProductDto>
}

export type ListProductsResponse =
  ListProductsResponses[keyof ListProductsResponses]

export type CreateProductData = {
  body: HarvestProductUpdateDto | TransformedProductUpdateDto
  path?: never
  query?: never
  url: '/api/products'
}

export type CreateProductErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type CreateProductError = CreateProductErrors[keyof CreateProductErrors]

export type CreateProductResponses = {
  /**
   * Created
   */
  201: ProductDto
}

export type CreateProductResponse =
  CreateProductResponses[keyof CreateProductResponses]

export type ListNewsData = {
  body?: never
  path?: never
  query?: {
    /**
     * Filter by author's name (exact match, case-insensitive)
     */
    authorName?: string
    /**
     * Filter by category ID (interpreted as 'type')
     */
    categoryId?: number
    /**
     * Zero-based page index (0..N)
     */
    page?: number
    /**
     * The size of the page to be returned
     */
    size?: number
    /**
     * Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     */
    sort?: Array<string>
  }
  url: '/api/news'
}

export type ListNewsResponses = {
  /**
   * Liste des articles de nouvelles récupérée avec succès
   */
  200: NewsPageDto
}

export type ListNewsResponse = ListNewsResponses[keyof ListNewsResponses]

export type CreateNewsData = {
  body: NewsCreateDto
  path?: never
  query?: never
  url: '/api/news'
}

export type CreateNewsErrors = {
  /**
   * Entrée invalide
   */
  400: ApiErrorResponse
}

export type CreateNewsError = CreateNewsErrors[keyof CreateNewsErrors]

export type CreateNewsResponses = {
  /**
   * Article de nouvelles créé
   */
  201: NewsCreateDto
}

export type CreateNewsResponse = CreateNewsResponses[keyof CreateNewsResponses]

export type ListNewsCategoriesData = {
  body?: never
  path?: never
  query?: never
  url: '/api/news-categories'
}

export type ListNewsCategoriesResponses = {
  /**
   * Liste des catégories récupérée avec succès
   */
  200: Array<NewsCategoryDto>
}

export type ListNewsCategoriesResponse =
  ListNewsCategoriesResponses[keyof ListNewsCategoriesResponses]

export type CreateNewsCategoryData = {
  body: NewsCategoryDto
  path?: never
  query?: never
  url: '/api/news-categories'
}

export type CreateNewsCategoryErrors = {
  /**
   * Entrée invalide
   */
  400: ApiErrorResponse
  /**
   * La catégorie existe déjà
   */
  409: ApiErrorResponse
}

export type CreateNewsCategoryError =
  CreateNewsCategoryErrors[keyof CreateNewsCategoryErrors]

export type CreateNewsCategoryResponses = {
  /**
   * Catégorie d'articles de nouvelles créée
   */
  201: NewsCategoryDto
}

export type CreateNewsCategoryResponse =
  CreateNewsCategoryResponses[keyof CreateNewsCategoryResponses]

export type ListLanguagesData = {
  body?: never
  path?: never
  query?: never
  url: '/api/languages'
}

export type ListLanguagesResponses = {
  /**
   * Liste récupérée avec succès
   */
  200: Array<LanguageDto>
}

export type ListLanguagesResponse =
  ListLanguagesResponses[keyof ListLanguagesResponses]

export type CreateLanguageData = {
  body: LanguageDto
  path?: never
  query?: never
  url: '/api/languages'
}

export type CreateLanguageErrors = {
  /**
   * Erreur de validation ou JSON invalide
   */
  400: ApiErrorResponse
}

export type CreateLanguageError =
  CreateLanguageErrors[keyof CreateLanguageErrors]

export type CreateLanguageResponses = {
  /**
   * Langue créée avec succès
   */
  201: LanguageDto
}

export type CreateLanguageResponse =
  CreateLanguageResponses[keyof CreateLanguageResponses]

export type ListFieldsData = {
  body?: never
  path?: never
  query?: {
    /**
     * ID du producteur possédant le champ
     */
    producerId?: number
  }
  url: '/api/fields'
}

export type ListFieldsResponses = {
  /**
   * Liste récupérée avec succès
   */
  200: Array<FieldDto>
}

export type ListFieldsResponse = ListFieldsResponses[keyof ListFieldsResponses]

export type CreateFieldData = {
  body: FieldUpdateDto
  path?: never
  query?: never
  url: '/api/fields'
}

export type CreateFieldErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type CreateFieldError = CreateFieldErrors[keyof CreateFieldErrors]

export type CreateFieldResponses = {
  /**
   * Created
   */
  201: FieldUpdateDto
}

export type CreateFieldResponse =
  CreateFieldResponses[keyof CreateFieldResponses]

export type ListDocumentsByUserData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    userId: number
  }
  query?: never
  url: '/api/documents/users/{userId}'
}

export type ListDocumentsByUserErrors = {
  /**
   * Utilisateur non trouvé
   */
  404: ApiErrorResponse
}

export type ListDocumentsByUserError =
  ListDocumentsByUserErrors[keyof ListDocumentsByUserErrors]

export type ListDocumentsByUserResponses = {
  /**
   * Liste récupérée
   */
  200: Array<DocumentDto>
}

export type ListDocumentsByUserResponse =
  ListDocumentsByUserResponses[keyof ListDocumentsByUserResponses]

export type CreateDocumentUserData = {
  body: {
    file?: Blob | File
  }
  path: {
    /**
     * Identifiant de la ressource
     */
    userId: number
  }
  query?: never
  url: '/api/documents/users/{userId}'
}

export type CreateDocumentUserErrors = {
  /**
   * Validation KO
   */
  400: ApiErrorResponse
  /**
   * Utilisateur non trouvé
   */
  404: ApiErrorResponse
  /**
   * Erreur stockage
   */
  500: ApiErrorResponse
}

export type CreateDocumentUserError =
  CreateDocumentUserErrors[keyof CreateDocumentUserErrors]

export type CreateDocumentUserResponses = {
  /**
   * Document créé
   */
  201: DocumentDto
}

export type CreateDocumentUserResponse =
  CreateDocumentUserResponses[keyof CreateDocumentUserResponses]

export type CreateDocumentQualityControlData = {
  body: {
    file?: Blob | File
  }
  path: {
    /**
     * Identifiant de la ressource
     */
    qualityControlId: number
  }
  query?: never
  url: '/api/documents/quality-controls/{qualityControlId}'
}

export type CreateDocumentQualityControlErrors = {
  /**
   * Validation KO
   */
  400: ApiErrorResponse
  /**
   * Contrôle qualité non trouvé
   */
  404: ApiErrorResponse
  /**
   * Erreur stockage
   */
  500: ApiErrorResponse
}

export type CreateDocumentQualityControlError =
  CreateDocumentQualityControlErrors[keyof CreateDocumentQualityControlErrors]

export type CreateDocumentQualityControlResponses = {
  /**
   * Document créé
   */
  201: DocumentDto
}

export type CreateDocumentQualityControlResponse =
  CreateDocumentQualityControlResponses[keyof CreateDocumentQualityControlResponses]

export type ListCooperativesData = {
  body?: never
  path?: never
  query?: never
  url: '/api/cooperatives'
}

export type ListCooperativesResponses = {
  /**
   * Liste récupérée avec succès
   */
  200: Array<CooperativeDto>
}

export type ListCooperativesResponse =
  ListCooperativesResponses[keyof ListCooperativesResponses]

export type CreateCooperativeData = {
  body: CooperativeUpdateDto
  path?: never
  query?: never
  url: '/api/cooperatives'
}

export type CreateCooperativeErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type CreateCooperativeError =
  CreateCooperativeErrors[keyof CreateCooperativeErrors]

export type CreateCooperativeResponses = {
  /**
   * Created
   */
  201: CooperativeDto
}

export type CreateCooperativeResponse =
  CreateCooperativeResponses[keyof CreateCooperativeResponses]

export type ListContractOffersData = {
  body?: never
  path?: never
  query?: {
    /**
     * ID du trader pour filtrer les contratss
     */
    traderId?: number
    /**
     * ID de la qualité
     */
    qualityId?: number
    /**
     * ID du vendeur
     */
    sellerId?: number
    /**
     * ID de l'acheteur
     */
    buyerId?: number
  }
  url: '/api/contracts'
}

export type ListContractOffersResponses = {
  /**
   * Liste récupérée avec succès
   */
  200: Array<ContractOfferDto>
}

export type ListContractOffersResponse =
  ListContractOffersResponses[keyof ListContractOffersResponses]

export type CreateContractOfferData = {
  body: ContractOfferUpdateDto
  path?: never
  query?: never
  url: '/api/contracts'
}

export type CreateContractOfferErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type CreateContractOfferError =
  CreateContractOfferErrors[keyof CreateContractOfferErrors]

export type CreateContractOfferResponses = {
  /**
   * Created
   */
  201: ContractOfferDto
}

export type CreateContractOfferResponse =
  CreateContractOfferResponses[keyof CreateContractOfferResponses]

export type SendContactMessageData = {
  body: ContactRequestDto
  path?: never
  query?: never
  url: '/api/contact'
}

export type SendContactMessageErrors = {
  /**
   * Erreur de validation
   */
  400: ApiErrorResponse
  /**
   * Erreur interne du serveur
   */
  500: ApiErrorResponse
}

export type SendContactMessageError =
  SendContactMessageErrors[keyof SendContactMessageErrors]

export type SendContactMessageResponses = {
  /**
   * Message envoyé avec succès
   */
  200: unknown
}

export type ListBidsData = {
  body?: never
  path?: never
  query?: {
    /**
     * ID de l'enchère contenant les offres
     */
    auctionId?: number
  }
  url: '/api/bids'
}

export type ListBidsResponses = {
  /**
   * Liste récupérée avec succès
   */
  200: Array<BidDto>
}

export type ListBidsResponse = ListBidsResponses[keyof ListBidsResponses]

export type CreateBidData = {
  body: BidUpdateDto
  path?: never
  query?: never
  url: '/api/bids'
}

export type CreateBidErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type CreateBidError = CreateBidErrors[keyof CreateBidErrors]

export type CreateBidResponses = {
  /**
   * Created
   */
  201: BidDto
}

export type CreateBidResponse = CreateBidResponses[keyof CreateBidResponses]

export type LogoutData = {
  body?: never
  path?: never
  query?: never
  url: '/api/auth/signout'
}

export type LogoutResponses = {
  /**
   * Utilisateur déconnecté avec succès
   */
  200: unknown
}

export type AuthenticateUserData = {
  body: LoginRequest
  path?: never
  query?: never
  url: '/api/auth/signin'
}

export type AuthenticateUserErrors = {
  /**
   * Requête mal formée (loginRequest invalide)
   */
  400: ApiErrorResponse
  /**
   * Échec de l'authentification
   */
  401: ApiErrorResponse
}

export type AuthenticateUserError =
  AuthenticateUserErrors[keyof AuthenticateUserErrors]

export type AuthenticateUserResponses = {
  /**
   * Utilisateur authentifié avec succès
   */
  200: UserDetailDto
}

export type AuthenticateUserResponse =
  AuthenticateUserResponses[keyof AuthenticateUserResponses]

export type AuthenticateWithGoogleData = {
  body: string
  path?: never
  query?: never
  url: '/api/auth/google'
}

export type AuthenticateWithGoogleErrors = {
  /**
   * Token invalide ou données erronées
   */
  400: ApiErrorResponse
}

export type AuthenticateWithGoogleError =
  AuthenticateWithGoogleErrors[keyof AuthenticateWithGoogleErrors]

export type AuthenticateWithGoogleResponses = {
  /**
   * Authentification réussie
   */
  200: UserDetailDto
}

export type AuthenticateWithGoogleResponse =
  AuthenticateWithGoogleResponses[keyof AuthenticateWithGoogleResponses]

export type ListAuctionsData = {
  body?: never
  path?: never
  query?: {
    /**
     * ID du trader ayant créé les enchères
     */
    traderId?: number
    /**
     * ID du trader ayant participé aux enchères
     */
    buyerId?: number
    /**
     * Status pour filtrer les enchères
     */
    status?: string
    /**
     * Nombre maximum d'enchères à obtenir
     */
    limit?: number
  }
  url: '/api/auctions'
}

export type ListAuctionsResponses = {
  /**
   * Liste récupérée avec succès
   */
  200: Array<AuctionDto>
}

export type ListAuctionsResponse =
  ListAuctionsResponses[keyof ListAuctionsResponses]

export type CreateAuctionData = {
  body: AuctionUpdateDto
  path?: never
  query?: never
  url: '/api/auctions'
}

export type CreateAuctionErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type CreateAuctionError = CreateAuctionErrors[keyof CreateAuctionErrors]

export type CreateAuctionResponses = {
  /**
   * Created
   */
  201: AuctionUpdateDto
}

export type CreateAuctionResponse =
  CreateAuctionResponses[keyof CreateAuctionResponses]

export type ListAuctionStrategiesData = {
  body?: never
  path?: never
  query?: never
  url: '/api/auctions/strategies'
}

export type ListAuctionStrategiesResponses = {
  /**
   * Liste récupérée avec succès
   */
  200: Array<AuctionStrategyDto>
}

export type ListAuctionStrategiesResponse =
  ListAuctionStrategiesResponses[keyof ListAuctionStrategiesResponses]

export type CreateAuctionStrategyData = {
  body: AuctionStrategyDto
  path?: never
  query?: never
  url: '/api/auctions/strategies'
}

export type CreateAuctionStrategyErrors = {
  /**
   * Bad Request
   */
  400: ApiErrorResponse
  /**
   * Conflict
   */
  409: ApiErrorResponse
}

export type CreateAuctionStrategyError =
  CreateAuctionStrategyErrors[keyof CreateAuctionStrategyErrors]

export type CreateAuctionStrategyResponses = {
  /**
   * Created
   */
  201: AuctionStrategyDto
}

export type CreateAuctionStrategyResponse =
  CreateAuctionStrategyResponses[keyof CreateAuctionStrategyResponses]

export type CheckPhoneData = {
  body?: never
  path?: never
  query: {
    /**
     * Téléphone à tester
     */
    phone: string
  }
  url: '/api/users/check/phone'
}

export type CheckPhoneResponses = {
  /**
   * Résultat de la vérification
   */
  200: boolean
}

export type CheckPhoneResponse = CheckPhoneResponses[keyof CheckPhoneResponses]

export type CheckEmailData = {
  body?: never
  path?: never
  query: {
    email: string
  }
  url: '/api/users/check/email'
}

export type CheckEmailResponses = {
  /**
   * Résultat de la vérification
   */
  200: boolean
}

export type CheckEmailResponse = CheckEmailResponses[keyof CheckEmailResponses]

export type ListRegionsData = {
  body?: never
  path?: never
  query?: never
  url: '/api/regions'
}

export type ListRegionsResponses = {
  /**
   * Liste récupérée avec succès
   */
  200: Array<RegionDto>
}

export type ListRegionsResponse =
  ListRegionsResponses[keyof ListRegionsResponses]

export type SubscribeData = {
  body?: never
  path?: never
  query?: {
    token?: string
  }
  url: '/api/notifications/stream'
}

export type SubscribeResponses = {
  /**
   * OK
   */
  200: SseEmitter
}

export type SubscribeResponse = SubscribeResponses[keyof SubscribeResponses]

export type DeleteDocumentData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/documents/{id}'
}

export type DeleteDocumentErrors = {
  /**
   * Document non trouvé
   */
  404: ApiErrorResponse
}

export type DeleteDocumentError =
  DeleteDocumentErrors[keyof DeleteDocumentErrors]

export type DeleteDocumentResponses = {
  /**
   * Document supprimé
   */
  204: void
}

export type DeleteDocumentResponse =
  DeleteDocumentResponses[keyof DeleteDocumentResponses]

export type GetDocumentData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/documents/{id}'
}

export type GetDocumentErrors = {
  /**
   * Document non trouvé
   */
  404: ApiErrorResponse
}

export type GetDocumentError = GetDocumentErrors[keyof GetDocumentErrors]

export type GetDocumentResponses = {
  /**
   * Document trouvé
   */
  200: DocumentDto
}

export type GetDocumentResponse =
  GetDocumentResponses[keyof GetDocumentResponses]

export type DownloadDocumentData = {
  body?: never
  path: {
    /**
     * Identifiant de la ressource
     */
    id: number
  }
  query?: never
  url: '/api/documents/{id}/download'
}

export type DownloadDocumentErrors = {
  /**
   * Document non trouvé
   */
  404: ApiErrorResponse
  /**
   * Erreur lecture document
   */
  500: ApiErrorResponse
}

export type DownloadDocumentError =
  DownloadDocumentErrors[keyof DownloadDocumentErrors]

export type DownloadDocumentResponses = {
  /**
   * Flux binaire renvoyé
   */
  200: Blob | File
}

export type DownloadDocumentResponse =
  DownloadDocumentResponses[keyof DownloadDocumentResponses]

export type GetCurrentUserData = {
  body?: never
  path?: never
  query?: never
  url: '/api/auth/me'
}

export type GetCurrentUserErrors = {
  /**
   * Utilisateur non authentifié
   */
  401: ApiErrorResponse
}

export type GetCurrentUserError =
  GetCurrentUserErrors[keyof GetCurrentUserErrors]

export type GetCurrentUserResponses = {
  /**
   * Utilisateur authentifié
   */
  200: UserDetailDto
}

export type GetCurrentUserResponse =
  GetCurrentUserResponses[keyof GetCurrentUserResponses]

export type Subscribe1Data = {
  body?: never
  path: {
    auctionId: number
  }
  query?: {
    visitor?: boolean
    token?: string
  }
  url: '/api/auctions/{auctionId}/sse'
}

export type Subscribe1Responses = {
  /**
   * OK
   */
  200: SseEmitter
}

export type Subscribe1Response = Subscribe1Responses[keyof Subscribe1Responses]

export type GetAuctionSettingsData = {
  body?: never
  path?: never
  query?: never
  url: '/api/auctions/settings'
}

export type GetAuctionSettingsErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type GetAuctionSettingsError =
  GetAuctionSettingsErrors[keyof GetAuctionSettingsErrors]

export type GetAuctionSettingsResponses = {
  /**
   * OK
   */
  200: GlobalSettingsDto
}

export type GetAuctionSettingsResponse =
  GetAuctionSettingsResponses[keyof GetAuctionSettingsResponses]

export type GetApplicationDataData = {
  body?: never
  path?: never
  query?: never
  url: '/api/app'
}

export type GetApplicationDataErrors = {
  /**
   * Internal Server Error
   */
  500: ApiErrorResponse
}

export type GetApplicationDataError =
  GetApplicationDataErrors[keyof GetApplicationDataErrors]

export type GetApplicationDataResponses = {
  /**
   * OK
   */
  200: ApplicationDataDto
}

export type GetApplicationDataResponse =
  GetApplicationDataResponses[keyof GetApplicationDataResponses]

export type GetUserData = {
  body?: never
  path: {
    /**
     * Identifiant de l'utilisateur
     */
    id: number
  }
  query?: never
  url: '/api/admin/users/{id}'
}

export type GetUserErrors = {
  /**
   * Utilisateur non trouvé
   */
  404: ApiErrorResponse
}

export type GetUserError = GetUserErrors[keyof GetUserErrors]

export type GetUserResponses = {
  /**
   * Utilisateur trouvé
   */
  200: UserDetailDto
}

export type GetUserResponse = GetUserResponses[keyof GetUserResponses]

export type GetFilteredDataData = {
  body?: never
  path?: never
  query?: {
    /**
     * Date/heure de début de la période d'analyse (inclus). Laisser vide avec 'end' pour récupérer toutes les données.
     */
    start?: string
    /**
     * Date/heure de fin de la période d'analyse (inclus). Laisser vide avec 'start' pour récupérer toutes les données.
     */
    end?: string
    /**
     * Si vrai, ne retourne que les enchères terminées dans la période spécifiée (si période spécifiée) ou toutes les enchères terminées si aucune période n'est spécifiée.
     */
    onlyEnded?: boolean
    /**
     * Format du fichier exporté : 'json' (défaut) ou 'csv'.
     */
    format?: string
  }
  url: '/api/admin/export/auctions'
}

export type GetFilteredDataErrors = {
  /**
   * Paramètres de requête invalides.
   */
  400: ApiErrorResponse
  /**
   * Erreur interne du serveur.
   */
  500: ApiErrorResponse
}

export type GetFilteredDataError =
  GetFilteredDataErrors[keyof GetFilteredDataErrors]

export type GetFilteredDataResponses = {
  /**
   * Fichier JSON contenant les données d'enchères.
   */
  200: Blob | File
}

export type GetFilteredDataResponse =
  GetFilteredDataResponses[keyof GetFilteredDataResponses]

export type GetDashboardGraphicSeriesData = {
  body?: never
  path?: never
  query?: never
  url: '/api/admin/dashboard/graphic'
}

export type GetDashboardGraphicSeriesResponses = {
  /**
   * Liste récupérée
   */
  200: Array<DashboardGraphicDto>
}

export type GetDashboardGraphicSeriesResponse =
  GetDashboardGraphicSeriesResponses[keyof GetDashboardGraphicSeriesResponses]

export type GetDashboardCardsData = {
  body?: never
  path?: never
  query?: never
  url: '/api/admin/dashboard/cards'
}

export type GetDashboardCardsErrors = {
  /**
   * Not Found
   */
  404: ApiErrorResponse
}

export type GetDashboardCardsError =
  GetDashboardCardsErrors[keyof GetDashboardCardsErrors]

export type GetDashboardCardsResponses = {
  /**
   * OK
   */
  200: DashboardCardsDto
}

export type GetDashboardCardsResponse =
  GetDashboardCardsResponses[keyof GetDashboardCardsResponses]

export type ClientOptions = {
  baseUrl: 'http://localhost:8080' | (string & {})
}
