// src/components/form/address-field.tsx
import { use, useMemo, useState } from 'react';
import type { AddressDto } from '@/api/generated';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from '@/components/ui/command';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Check, ChevronsUpDown } from 'lucide-react';
import { cn } from '@/lib/utils';
import { SelectorMap, type NominatimAddress } from '@/components/map/SelectorMap';
import cityNamesJson from '@/data/cities.json';
import { useFieldContext } from '.'; // Ne pas importer useFormContext si vous ne l'utilisez pas
import type { ReactFormExtendedApi } from '@tanstack/react-form';
import { FixedSizeList, type ListChildComponentProps } from 'react-window';
import { zAddressDto } from '@/api/generated/zod.gen';
import z  from 'zod/v4';
import { DebugFieldErrors } from './DebugFieldErrors';
import { FieldErrors } from './field-errors';
import { useTranslation } from 'react-i18next';


export const zAddressFieldWrapper = z.object({
    address: zAddressDto, // Utiliser le schéma zAddressDto pour valider l'adresse
  });
  
  /** Type TypeScript inféré */
  export type AddressFieldWrapper = z.infer<typeof zAddressFieldWrapper>;

  export type AddressReactForm = ReactFormExtendedApi<
  AddressFieldWrapper,           // 1) TFormData      → { address: AddressDto }
  undefined,                     // 2) TOnMount       (non utilisé)
  typeof zAddressFieldWrapper,   // 3) TOnChange      → validation Zod
  undefined, undefined, undefined, undefined, undefined, undefined, undefined>

interface CityOption {
  id: number;
  label: string;
  value: string;
}
const cityOptions: CityOption[] = cityNamesJson.map((name, index) => ({
  id: index + 1,
  label: name,
  value: String(index + 1),
}));

interface AddressFieldProps {
  label: string;
  required?: boolean;
  withMap?: boolean;
  mapHeight?: string;
}

export function AddressField({
  label,
  required,
  withMap = false,
  mapHeight = '300px',
}: AddressFieldProps) {
  const parentField = useFieldContext<AddressDto>();
  const formInstance = parentField.form as AddressReactForm;
  const [openCity, setOpenCity] = useState(false);
  const [searchTermCity, setSearchTermCity] = useState('');
  const { t } = useTranslation();
  // Options filtrées pour la virtualisation, basé sur searchTermCity
  const filteredCityOptions = useMemo(() => {
    if (!searchTermCity) return cityOptions;
    return cityOptions.filter(opt =>
      opt.label.toLowerCase().includes(searchTermCity.toLowerCase())
    );
  }, [searchTermCity]);
  
  const renderCityField = () => (
    <formInstance.Field
      name={`address.cityId`}
      validators={{
        onChange: ({ value }) => {
          const error = !value ? 'La ville est obligatoire' : undefined;
          console.log(`[Validator:CityId:onChange] Value: ${value}, Returned Error: ${error}`);
          return error;
        },
      }}
    >
      {(cityField) => {
        const ITEM_HEIGHT = 35; // Hauteur de chaque CommandItem (ajustez si nécessaire)
        // Calculez la hauteur de la liste en fonction du nombre d'éléments filtrés
        // Limitez la hauteur maximale pour éviter que la popover ne devienne trop grande.
        const maxVisibleItemsInPopover = 7;
        const listHeight = Math.min(filteredCityOptions.length * ITEM_HEIGHT, maxVisibleItemsInPopover * ITEM_HEIGHT);
        
        const CityRow = ({ index, style }: ListChildComponentProps) => {
            const opt = filteredCityOptions[index];
            if (!opt) return null;
            return (
              <CommandItem
                key={opt.id}
                style={style} // react-window fournit le style pour le positionnement
                value={opt.label} // Utilisé par Command pour la recherche/filtrage (si pas géré par searchTermCity)
                onSelect={() => {
                  cityField.handleChange(opt.id);
                  setOpenCity(false);
                  setSearchTermCity(''); // Réinitialiser la recherche
                  cityField.handleBlur();
                }}
              >
                <Check className={cn('mr-2 h-4 w-4', cityField.state.value === opt.id ? 'opacity-100' : 'opacity-0')} />
                {opt.label}
              </CommandItem>
            );
          };
  
        // console.log(`[Render CityField:${cityField.name}] Meta State:`, JSON.stringify(cityField.state.meta, null, 2));
        return (
            <div className="space-y-1">
              <Label htmlFor={`${cityField.name}-btn`}>Ville {required && <span className="text-red-500">*</span>}</Label>
              <Popover open={openCity} onOpenChange={(isOpen) => {
                setOpenCity(isOpen);
                if (!isOpen) {
                  setSearchTermCity(''); // Réinitialiser la recherche à la fermeture
                }
              }}>
                <PopoverTrigger asChild>
                  <Button variant="outline" role="combobox" id={`${cityField.name}-btn`} aria-expanded={openCity} className="w-full justify-between">
                    {cityField.state.value ? cityOptions.find((c) => c.id === cityField.state.value)?.label : 'Sélectionner une ville…'}
                    <ChevronsUpDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-[--radix-popover-trigger-width] max-h-[--radix-popover-content-available-height] p-0">
                  <Command
                    // Le filtrage est maintenant géré par searchTermCity et filteredCityOptions
                    // Il n'est plus nécessaire de passer un 'filter' à Command si on contrôle les options
                    // passées à FixedSizeList.
                  >
                    <CommandInput
                      placeholder="Rechercher…"
                      value={searchTermCity}
                      onValueChange={setSearchTermCity}
                    />
                    <CommandList>
                      <CommandEmpty>{filteredCityOptions.length === 0 && searchTermCity !== "" ? "Aucune ville trouvée pour votre recherche." : "Aucune ville trouvée."}</CommandEmpty>
                      {/* CommandGroup peut rester pour le style, FixedSizeList va à l'intérieur */}
                      <CommandGroup>
                        {filteredCityOptions.length > 0 ? (
                          <FixedSizeList
                            height={listHeight} // Hauteur calculée
                            itemCount={filteredCityOptions.length}
                            itemSize={ITEM_HEIGHT}
                            width="100%" // Prendra la largeur du parent (CommandGroup/CommandList)
                          >
                            {CityRow}
                          </FixedSizeList>
                        ) : (
                           searchTermCity === "" && <CommandEmpty>Commencez à taper pour rechercher une ville.</CommandEmpty> // Message si la recherche est vide et la liste initiale est vide ou si on veut guider l'utilisateur
                        )}
                      </CommandGroup>
                    </CommandList>
                  </Command>
                </PopoverContent>
              </Popover>
              <DebugFieldErrors fieldName={cityField.name} meta={cityField.state.meta} />
            </div>
        );
      }}
    </formInstance.Field>
  );
  const streetSchema = zAddressDto.pick({ street: true }).shape.street;
  const renderStreetField = () => {

    return(
    <formInstance.Field
      name={`address.street`}
      validators={{
        onChange: ({ value }) => {
            const result = streetSchema.safeParse(value ?? '');
            return result.success
              ? undefined
              : t('validation.required')  // ← le message Zod par défaut
          },
      }}
    >
      {(streetField) => {
        console.log(`[Render StreetField:${streetField.name}] Meta State:`, JSON.stringify(streetField.state.meta, null, 2));
        return (
          <div className="space-y-1">
            <Label htmlFor={streetField.name}>Rue / Quartier {required && <span className="text-red-500">*</span>}</Label>
            <Input
              id={streetField.name}
              name={streetField.name}
              value={streetField.state.value ?? ''}
              onBlur={streetField.handleBlur}
              onChange={(e) => streetField.handleChange(e.target.value)}
              placeholder="Ex : Rue de la soif"
            />
            <DebugFieldErrors fieldName={streetField.name} meta={streetField.state.meta} />
            <FieldErrors meta={streetField.state.meta}/>
          </div>
        );
      }}
    </formInstance.Field>
  );}

  const renderLocationField = () => (
    <formInstance.Field
      name={`address.location`}
      validators={{
        onChange: ({ value }) => {
          const error = !value ? 'Merci de choisir un point sur la carte' : undefined;
          console.log(`[Validator:Location:onChange] Value: ${value}, Returned Error: ${error}`);
          return error;
        },
      }}
    >
      {(locationField) => {
        // console.log(`[Render LocationField:${locationField.name}] Meta State:`, JSON.stringify(locationField.state.meta, null, 2));
        return (
          <div className="space-y-1">
            <Label>Localisation sur la carte {required && <span className="text-red-500">*</span>}</Label>
            <SelectorMap
              mapHeight={mapHeight}
              initialPosition={locationField.state.value}
              onPositionChange={(point: string, addr?: NominatimAddress) => {
                if (addr?.city) {
                  const foundCity = cityOptions.find((c) => c.label.localeCompare(addr.city!, undefined, { sensitivity: 'base' }) === 0);
                  if (foundCity) {
                    formInstance.setFieldValue(`address.cityId`, foundCity.id);
                  }
                }
                locationField.handleChange(point);
              }}
            />
            {locationField.state.value && <p className="text-xs text-gray-500 mt-1">Coordonnée : {locationField.state.value}</p>}
            <DebugFieldErrors fieldName={locationField.name} meta={locationField.state.meta} />
          </div>
        );
      }}
    </formInstance.Field>
  );

  return (
    <div className="space-y-3 p-4 border rounded-md">
      <Label className="text-lg font-semibold">
        {label}
      </Label>
      {renderCityField()}
      {renderStreetField()}
      {withMap && renderLocationField()}
    </div>
  );
}